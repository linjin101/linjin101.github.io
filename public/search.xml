<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[打板原则---赌场里不是人精就是庄家！]]></title>
      <url>%2F2018%2F03%2F29%2F%E6%89%93%E6%9D%BF%E5%8E%9F%E5%88%99-%E8%B5%8C%E5%9C%BA%E9%87%8C%E4%B8%8D%E6%98%AF%E4%BA%BA%E7%B2%BE%E5%B0%B1%E6%98%AF%E5%BA%84%E5%AE%B6%EF%BC%81%2F</url>
      <content type="text"><![CDATA[赌场里不是人精就是庄家打板：就是虎口拔牙，把握时机，严格执行仓位，止损纪律才有可能保持盈利原则：1.一致性预期太强，开盘就封，有风险！2.前一天缩量涨停，资金没有分歧，开盘涨停里面全部获利盘，一旦产生分歧，获利盘抢跑，必须抛，危险！！！3.栏板不补仓，止损！！！4.小仓位，小仓位，小仓位，最多2层！！！5.要打就打龙头，要么不打！选好标的，集合竞价封板开口即买，买不到不强求。 测试策略：条件：1.题材有板块概念2.前一天涨停板3.今日集合竞价期间（9：15~9:30）必须一字板4.开盘9:30~9:31分留一个小缺口(2%以内)特点：1.操作难度高，盯盘，下单必须手快。通常在第二个连板进入，第三天退出。2.打板完成后，第二天又大幅波动，不再追求涨停，逢高卖出。3.每天不一定有这种股票，不克强求封不住涨停的股票。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[股市金刚经-豪赚100亿的大佬葛卫东强烈推荐此文]]></title>
      <url>%2F2018%2F03%2F23%2F%E8%82%A1%E5%B8%82%E9%87%91%E5%88%9A%E7%BB%8F%EF%BC%81%E8%B1%AA%E8%B5%9A100%E4%BA%BF%E7%9A%84%E5%A4%A7%E4%BD%AC%E8%91%9B%E5%8D%AB%E4%B8%9C%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%E6%AD%A4%E6%96%87%EF%BC%81%2F</url>
      <content type="text"><![CDATA[转自：每经投资宝 葛卫东，江湖尊号“葛老大”，2000年开始做期货，两次爆仓，2004年迅速崛起，成为期湖中一代枭雄。年均收益率达120%，目前资产已达120亿。混沌投资收购鸿海期货的期货传奇人物葛卫东在期货造富神话之外，再次创造了一个里程碑：私募并购期货公司。创造了交易员到私募大鳄再到控股期货公司的蜕变。 股市金刚经——绝顶高手的至深感悟交易之道，刚者易折。惟有至阴至柔，方可纵横天下。天下柔弱者莫如水，然上善若水。成功，等于小的亏损，加上大大小小的利润，多次累积。 做到不出现大亏损很简单，以生存为第一原则，当出现妨碍这一原则的危险时，抛弃其他一切原则。因为，无论你过去曾经，有过多少个100％的优秀业绩，现在只要损失一个100％，你就一无所有了。 交易之道，守不败之地，攻可赢之敌。100万亏损50％就成了50万，50万增值到100万却要盈利100％才行。每一次的成功，只会使你迈出一小步。但每一次失败，却会使你向后倒退一大步。从帝国大厦的第一层走到顶楼，要一个小时。但是从楼顶纵身跳下，只要30秒，就可以回到楼底。在交易中，永远有你想不到的事情，会让你发生亏损。需不需要止损的最简单方法，就是问自己一个问题：假设现在还没有建立仓位，是否还愿意在此价位买进。答案如果是否定，马上卖出，毫不犹豫。 逆势操作是失败的开始。不应该对抗市场，或尝试击败他。 没有必要比市场精明。趋势来时，应之，随之。无趋势时，观之，静之。等待趋势最终明朗后，再动手也不迟。 这样会失去少量的机会，但却赢得了资金的安全。 你的目标必须与市场保持一致，顺应市场的趋势 如果你与市场保持一致，利润自会滚滚而来。 如果你看错了趋势，就得使用古老而可靠的保护伞——止蚀单。 这就是趋势和利润的关系。 成功的两项最基本规则就是：停损和持长。一方面，截断亏损，控制被动。另一方面，盈利趋势未走完，就不轻易出场，要让利润充分增长。多头市场上，大多数股票可以不怕暂时被套。因为下一波上升会很快让人解套，甚至获利。这时候，买对了还要懂得安坐不动，不管风吹浪打，胜似闲庭信步。 交易之道的关键，就是持续掌握优势。 快速认赔，是空头市场交易中的一个重要原则。 当头寸遭受损失时，切忌加码再搏。 在空头市场中，不输甚至少输就是赢。多做多错，少做少错，不做不错。 在一个明显的空头市场，如果因为害怕遭受小损失而拒绝出局，迟早会遭受大损失。一只在中长期下降趋势里挣扎的股票，任何时候卖出都是对的。哪怕是卖在了最低价上。被动持有等待它的底部，这种观点很危险，因为它可能根本没有底。学会让资金分批入场。一旦首次入场头寸发生亏损，第一原则就是不能加码。最初的损失往往就是最小的损失，正确的做法就是应该直接出场。如果行情持续不利于首次进场头寸，就是差劲的交易，不管成本多高，立即认赔。希望在底部或头部一次搞定的人，总会拿到烫手山芋。 熊市下跌途中，钱多也不能赢。机构常常比散户死的难看。 小资金没有战略建仓的必要，不需要为来年未知行情提前做准备。不需要和主力患难到底。 明显下跌趋势中，20－30点的小反弹，根本不值得兴奋和参与。有所不为才能有所为。行动多并不一定就效果好。有时什么也不做，就是一种最好的选择。 不要担心错失机会，善猎者必善等待。在没有大机会的时候，要安静的如一块石头。 交易之道在于，耐心等待机会，耐心等待最有利的风险/报酬比，耐心掌握机会。熊市里，总有一些机构，拿着别人的钱，即使只有万分之几的希望，也拼命找机会挣扎，以求突围解困。我们拿着的是自己的钱，要格外珍惜才对。 不要去盲目测底，更不要盲目炒底。要知道，底部和顶部，都是最容易赔大钱的区域。 当你感到困惑时，不要作出任何交易决定。不需要勉强进行交易，如果没有适当的行情。没有胜算较高的机会，不要勉强进场。 股市如战场，资金就是你的士兵。在大方向正确的情况下，才能从容地投入战斗。要先胜而后求战，不能先战而后求胜。 投机的核心就是尽量回避不确定走势，只在明显的涨势中下注。并且在有相当把握的行动之前，再给自己买一份保险(止损位摆脱出局)，以防自己的主观错误。做交易，必须要拥有二次重来的能力，包括资金上，信心上和机会上。你可以被市场打败，但千万不能被市场消灭。我们来到这个市场是为了赚钱，但是这个市场却不是全自动提款机。 进入股市，就是要抢劫那些时刻准备抢劫你的人。股票投机讲究时机和技巧，机会不是天天有，即使有，也不是人人都能抓住。要学会分析自己擅长把握的机会，以己之长，攻彼之短。有机会就捞一票，没机会就观望，离开。如果自己都不清楚自己擅长什么，就不要轻举妄动。与鳄共泳有风险，入市捞钱需谨慎。 做交易，最忌讳使用压力资金。资金一旦有了压力，心态就会扭曲。你会因为市场上的正常波动而惊慌出局，以至事后才发现自己当初处于非常有利的位置。你也会因为受制于资金的使用时间，在没有机会的时候孤注一掷，最终满盘皆输。许多人勤奋好学，开口有江恩，闭口艾略特，说对了，到处炫耀，亏大了，以为自己学艺不精，加倍钻研。 时间之窗，窗越开越多，波浪理论，钱越数越少，最后把自己弄得稀里糊涂，自今也清醒不过来。 要知道，所有的理论和技术都是在尊重市场趋势的前提下才能运用的好，如果总是长期挨套，只能说明你连股市中最基本的牛熊趋势都没分清，看盘看得再精，数字无限神奇，也不能改变你失败的命运。即使再出现一个牛熊轮回，套牢的依然还是你。还满口索罗斯，巴菲特呢，瞎掰！ 资金管理是战略，买卖股票是战术，具体价位是战斗。在十次交易中，即使六次交易你失败了，但只要把这六次交易的亏损，控制在整个交易本金20％的损失内，剩下的四次成功交易，哪怕用三次小赚，去填补整个交易本金20％的亏损，剩下一次大赚，也会令你的收益不低。你无法控制市场的走向，所以不需要在自己控制不了的形势中浪费精力和情绪。不要担心市场将出现怎样的变化，要担心的是你将采取怎样的对策回应市场的变化。判断对错并不重要，重要的是当你正确时，你获得了多大的利润，当你错误的时候，你能够承受多少亏损。 入场之前，静下心来多想想，想想自己有多少专业技能支撑自己在市场中拼杀，想想自己的心态是否可以禁得住大风大浪的起伏跌宕，想想自己口袋中有限的资金是否应付得了无限的机会和损失。 炒股如出海，避险才安全。海底的沉船都有一堆航海图。 最重要的交易成功因素，并不在于用的是哪一套规则，而在于你的自律功夫。时间决定一切。总设计师和林副主席的不同故事告诉我们，人生并不只是谋略之争，某种程度上也是时间和生命的竞争。 巴非特多活10年，每年哪怕只有5％的持续盈利，其财富的总增长，也足以笑傲天下。 佬葛卫东的29个至深感悟（值得学习）1、他们的判断仍是基于事实和数据这两个基本维度，而他们参与的这场游戏，却是在情绪的第三维和梦想的第四维上展开的。2、我们每个人的一生都像是在路上！经过一段狂奔以後，你需要减慢速度，甚至停下来看看，歇歇，想想下一段路怎麽走！人生的路怎麽走不仅需要思考，更需要平衡，平衡是为了把人的有限的精力合理的分配达到效力最大化，这是厚积薄发！正所谓磨刀不误砍柴功。3、研究是要讲方法的，有的人研究行情太努力，反而变成一叶障目，只见树木，不见深林！太专注细节会把自己弄晕。有的人对基本面的研究又太不重视，根本不知道博弈的标的的情况和变化，又会太迟钝，搞不清楚市场的大方向。最佳的是要成竹在胸，既有大貌，又明白现在的或潜在的主要矛盾，仔细体会市场对每个因数的评估到位情况，是否有偏差，所以，既要努力研究，又要和市场保持恰当的距离就变成了一种艺术！4、必须知道有所为，有所不为，才能腾出时间！必须知道有所放弃，才能提高效率！腾出时间来做有决定性意义的事，这是我目前该修行的功课。5、情绪，性格偏好和理性是一对死敌！我认为有四种情况，自己被情绪，性格偏好所左右而不知自己非理性；知道自己非理性，但不知道那些决定是理性的，那些决定是被情绪和性格偏好所左右的的非理性；还有一种是知道自己情绪和性格偏好影响了自己的决定，但是仍旧欲罢不能的；最後一种就是完全理性！6、王阳明说格物致知！也就是对一个事情要不停的分析，抽丝剥茧，透过现象发现事物的本质，不会被假象蒙蔽你的双眼！这会让你很成功，也会让你很无趣！7、这句话是千真万确的，内向的人才会更容易有更深刻的思考，而且做投资的人要尽量减少不必要的应酬，不需要别人的褒奖，更不需要别人的批评！需要的只是大量的时间面对自己的内心！所以，有时候不是我们高傲，是职业要求我们必须这样。8、做期货要保持适当的压力！压力太大，影响判断；压力太小，会不够敏感！真是难啊，所以说要先战胜自己，才能战胜市场。9、刻意也是大敌！刻意说明不够空，还有执着心！也是感应市场的障碍！所以说魔障无处不在不在！难啊，悟道，修行真的处处是陷进！10、人在很累，精力耗尽的时候就很容易出错！所以，在市场中要劳逸结合！保持适当的紧张度！做期货为什么赚不到钱，是因为人类思维有很多陷进，大多数人都不能鉴别这种陷进！而情绪的波动让你增加掉进陷进的概率！ 11、对市场有两种态度，一是预测，二是倾听。这两种模式是相互干扰的！以我的观点，倾听比预测更重要，更靠谱。可市场上的人都太过分看重预测的可靠性，为什么呢？其实是很多事后进行假分析看似靠谱蒙蔽了大家的眼睛，其实危机真的来临时，有几个人能预测到？即使有，也绝对不是砖家！倾听很重要，也很可靠。12、倾听的人能在第一时间感受到市场方向的加强和转折的发生！像最近的黄金走势？能平掉多头和／或做了空头的人大都是倾听者！如果你习惯做预测者，那你已经失去了开放的心灵，失去了你的听力！所以，原谅我从来不愿意发表市场观点！因为我想要一颗开放的心灵，拥有良好的听力！13、倾听的能力培养其实是很困难的，首先需要拥有开放的心灵，清空思想的水杯！但期货本来就伴随贪婪和恐惧，所以清空很难。二是，要对所交易的对象很了解，必须有成竹在胸；必须有很深的技术功底；对市场心态和人气有充分的了解；三种方面相互对照，分析，感应，你才能知道什么是强弱和市场阻力最小的方向。14、影响价格的因素很多，即使你能完全了解市场上的利多和利空因素，但他们导入价格体系的时间和方式不同，所起的作用也不同！这也是确定结果无法确定预测的原因之一，所以最佳的方法一是承认认知的局限性，二是又要确认单个因果关系的存在，然后品味市场的强弱，倾听市场的声音！不断修正剩下的可能……15、我的太极老师说的，人只有自己处于静的状态，才有可能在推手中第一时间感受到对手的力道和意图！我当时的感受是只有清空自己，才能最大限度和最快的接收信息，作出正确的判断和应对。期货也莫不如此！16、我说的不要预测不是说不要分析判断！做投资分析判断是必须的！但我们在此过程中必须明白，我们的结论最多只是一种可能性，确定的结果是不存在的，否则你的胜算就是百分之百了，这显然是不现实的！市场这个系统是混沌的，人的认知能力是有限的，所以我们分析判断的结果只是若干的可能性而已！17、做人要能放能收！要耐得住寂寞，享受得了繁华！要忍受得了艰辛，也要适应养尊处优！生活有高潮低谷，唯有处变不惊才是正道。你才是个优秀的男人！18、终于明白阳明心学的＂致良知＂是个什么意思了！原来良好的心态对悟道那么重要！做交易何尝不是！所有因素中，这是排第一位的！19、交易最怕矫枉过正，从一个极端到另外一个极端！可是评估是否矫枉过正本来就是一件非常困难的事！必须在心态平和的前提下，扪心自问才有可能得出正确的结论。20、关于卡住的问题：做期货这么多年，以前苦学知识和操盘的经验逐渐形成有效的直觉！后面依赖这种直觉逐渐变成思想上的懒惰，不再苦学和勤于思考！不再努力追究事情后面的推手！慢慢的就有了自己被卡住的感觉，思想和直觉也在退步！努力学习就变得很必要，不仅能让你获得思考的快感，也能愉悦的给身心充电。21、我要想交易水平再上一个台阶，必须审视自己的内心，体会到造成建仓和平仓差异的原因！否则，瓶颈无法突破，交易水平也许会逆水行舟，不进则退！22、信仰会阻碍真实的理解，所以，不要让你的观点变成一种信仰！23、正确的思想必须奠基在自我了解之上。若是不了解自己，你的思想不可能有基础；缺少了自我认识，思想不可能正确！24、投资十几年，也取得一点小成绩，问我自己什么最难？一是认识自己！二是做到知行合一！25、不要想变成什么或是想抓住某个经验。这是叫你拥有开放的心灵，你内心东西越少，越能容得下更多的东西，才能拥有更强大的洞察力。26、听得懂市场，你就可以和市场合二为一。费力的去听，其实是带着欲望去听，这是不好的，但是人非圣贤，怎么可能完全摈弃内心的比较贪婪，欲望等比较之心呢！对于修行，作者也说了：“若是能一边聆听，一边觉知内心的冲突和矛盾，而不形成特定的思想模式，那么内在的扰动或许能止息下来。”27、不懂行为经济学的是做不好期货的！28、真正的大智慧不是学来的，而是悟出来，而绝对智慧是在无我的绝对状态下自然而然出现的。29、最大的幸福就是清空自己的大脑，有句话怎么说来着的：勘破，放下，自在！ 榜样永远是学习的动力，期货在于现货市场同样适合，作为同根生的市场，两者有着近似雷同的感受！希望未来再出现一位同样葛式现货界的大佬，这也是本人的自勉！与诸君共勉！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[股市行情的真谛-读书笔记]]></title>
      <url>%2F2018%2F03%2F21%2F%E8%82%A1%E5%B8%82%E8%A1%8C%E6%83%85%E7%9A%84%E7%9C%9F%E8%B0%9B%2F</url>
      <content type="text"><![CDATA[本书英文：《TRUTH OF THE STOCK TAPE》,中文旧版翻译为《江恩股市定律》江恩的介绍看：天使与恶魔的战争-读书笔记01 每年都有巨额资金因为愚蠢的决策和傻瓜版的投资而打水漂，这些无畏的损失可以追溯一个原因，就是缺乏投资知识。人们生病知道自己知识不足，而去找医生、专家咨询，但是处理投资确经常会毫无准备就不假思索的将成千上万的资金投入到他们无所不知的企业中去。所以，如果他们损失惨重，那也理所当然，丝毫不足为奇了。本书的目的旨在强调和阐明那些具有实践价值的基本原理，即使仅仅只能让几个人停止赌博式的投资而踏上保守投机和投资的道路，就算笔者的工作没有白费。 —威廉.D.江恩 关于看盘，每天盯盘过于关注分时图的涨跌，上上下下会影响情绪而且毫无价值。每天交易一次的频繁交易累计的佣金造成百分之几十的损失非常可怕。除非顶尖高手不要尝试频繁交易。 股票能够贴现未来事件，股票价格的波动，一般来说是由在普通公众知道之前很久就已经存在的诸多因素说造成的结果或产生的影响。 投资者必备的素质：耐心、勇气、知识、健康和休息 成功交易12大规则： 一、所需资金本量 二、限制自己的风险 三、过度交易是最大的敌人 四、永远不让盈利变成损失 五、不要逆势而为 六、拿不准就退出 七、只选择活跃的股票进行交易 八、均摊风险 九、确定买入或卖出的价格和点位 十、获利的时机 十一、累计盈余 十二、不要为了分红买进]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[天使与恶魔的战争-读书笔记01]]></title>
      <url>%2F2017%2F09%2F24%2F%E5%A4%A9%E4%BD%BF%E4%B8%8E%E6%81%B6%E9%AD%94%E7%9A%84%E6%88%98%E4%BA%89%2F</url>
      <content type="text"><![CDATA[《天使与恶魔的战争》朋友介绍买了本书看看，该作者总结了很多经典金融理论，然后根据自己理解和实践用很容易理解的方式总结出来，值得一看。 人性最大的弱点贪婪和恐惧 先有股价再有技术指标，所有指标都是泻后的 交易方面：时机大于仓位，仓位大于个股选择 股市传奇巴菲特的几个理念：1.及时止损：第一条“不要亏损本金”，第二条遵循第一条；2.价值投资：通过PE寻找价值洼地（通过股市低迷时候重磅介入，上涨中获利，其实也是投机）3.技术与艺术：做股票一方面需要科学研究，另一方面需要艺术逻辑推导，而后者的重要程度要远远高于前者（科学研究指的是K线、均线、基本面、技术面等等能够通过技术分析来进行逻辑判断的股票投资技能，而艺术逻辑推导指的是人性的对抗和心态的调整。艺术逻辑推导要比科学研究更难、更重要。）4.不犯大错：投资人并不需要做对多少事情，重要的是要能不犯重大的过错 彼得.林奇1.股票投资是一门艺术而非仅仅是科学,是艺术、心理学、历史学、哲学、政治学的结合，是一门综合性学科，而不仅仅是数学和几何学，因为里面太多的人文情节。 “价值投资之父”本杰明.格雷厄姆巴菲特老师,被誉为“价值投资之父”、“华尔街教父”1.严禁投资本金损失2.不要忘记第一条3.永远只买低于公司净资产三分之二的公司，永远不要买高于实际价值三分之一的公司（A股只能股灾之后，大量股票跌破净资产才符合这个投资原则） 查尔斯.道和道氏理论道琼斯指数的发明者道氏理论是所有股票技术分析的基础 拉尔夫.尼尔森.艾略特与波兰理论总结: 5浪上涨,3浪下跌,浪中有浪,所有”千人千浪” 三个铁律: 2浪回调不能低于1浪起点 3浪不能最短,但是可以不是最长的浪 4浪不能与1浪重叠,即4浪回调的最低点不能低于1浪的最高点]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[大型分布式网站术语分析]]></title>
      <url>%2F2017%2F03%2F28%2F%E5%A4%A7%E5%9E%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%AB%99%E6%9C%AF%E8%AF%AD%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[1. I/O优化 增加缓存，减少磁盘的访问次数。 优化磁盘的管理系统，设计最优的磁盘方式策略，以及磁盘的寻址策略，这是在底层操作系统层面考虑的。 设计合理的磁盘存储数据块，以及访问这些数据库的策略，这是在应用层面考虑的。例如，我们可以给存放的数据设计索引，通过寻址索引来加快和减少磁盘的访问量，还可以采用异步和非阻塞的方式加快磁盘的访问速度。 应用合理的RAID策略提升磁盘I/O。 2. Web前端调优 减少网络交互的次数（多次请求合并） 减少网络传输数据量的大小(压缩) 尽量减少编码（尽量提前将字符转化为字节，或者减少从字符到字节的转化过程。） 使用浏览器缓存 减少Cookie传输 合理布局页面 使用页面压缩 延迟加载页面 CSS在最上面，JS在最下面 CDN 反向代理 页面静态化 异地部署 3.服务降级（自动优雅降级）拒绝服务和关闭服务 4.幂等性设计有些服务天然具有幂等性，比如讲用户性别设置为男性，不管设置多少次，结果都一样。但是对转账交易等操作，问题就会比较复杂，需要通过交易编号等信息进行服务调用有效性校验，只有有效的操作才能继续执行。 （注：幂等性是系统的接口对外一种承诺(而不是实现), 承诺只要调用接口成功, 外部多次调用对系统的影响是一致的. 声明为幂等的接口会认为外部调用失败是常态, 并且失败之后必然会有重试.） 5.失效转移若数据服务器集群中任何一台服务器宕机，那么应用程序针对这台服务器的所有读写操作都需要重新路由到其他服务器，保证数据访问不会失败，这个过程叫失效转移。失效转移包括：失效确认（心跳检测和应用程序访问失败报告）、访问转移、数据恢复。失效转移保证当一个数据副本不可访问时，可以快速切换访问数据的其他副本，保证系统可用。 6.性能优化根据网站分层架构,性能优化可分为：web前端性能优化、应用服务器性能优化、存储服务器性能优化。 web前端性能优化 浏览器访问优化：减少http请求;使用浏览器缓存;启用压缩;css放在页面最上面、javaScript放在页面最下面;减少Cookie传输 CDN加速 反向代理 应用服务器性能优化 分布式缓存（Redis等） 异步操作（消息队列） 使用集群（负载均衡） 代码优化 存储性能优化 机械硬盘vs固态硬盘 B+树 vs LSM树 RAID vs HDFS 7. 代码优化 多线程（Q:怎么确保线程安全？无锁机制有哪些？） 资源复用（单例模式，连接池，线程池） 数据结构 垃圾回收 8. 负载均衡HTTP重定向负载均衡 当用户发来请求的时候，Web服务器通过修改HTTP响应头中的Location标记来返回一个新的url，然后浏览器再继续请求这个新url，实际上就是页面重定向。通过重定向，来达到“负载均衡”的目标。例如，我们在下载PHP源码包的时候，点击下载链接时，为了解决不同国家和地域下载速度的问题，它会返回一个离我们近的下载地址。重定向的HTTP返回码是302。 优点：比较简单。 缺点：浏览器需要两次请求服务器才能完成一次访问，性能较差。重定向服务自身的处理能力有可能成为瓶颈，整个集群的伸缩性国模有限；使用HTTP302响应码重定向，有可能使搜索引擎判断为SEO作弊，降低搜索排名。 DNS域名解析负载均衡 DNS（Domain Name System）负责域名解析的服务，域名url实际上是服务器的别名，实际映射是一个IP地址，解析过程，就是DNS完成域名到IP的映射。而一个域名是可以配置成对应多个IP的。因此，DNS也就可以作为负载均衡服务。 事实上，大型网站总是部分使用DNS域名解析，利用域名解析作为第一级负载均衡手段，即域名解析得到的一组服务器并不是实际提供Web服务的物理服务器，而是同样提供负载均衡服务的内部服务器，这组内部负载均衡服务器再进行负载均衡，将请求分发到真是的Web服务器上。 优点：将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦，同时许多DNS还支持基于地理位置的域名解析，即会将域名解析成举例用户地理最近的一个服务器地址，这样可以加快用户访问速度，改善性能。 缺点：不能自由定义规则，而且变更被映射的IP或者机器故障时很麻烦，还存在DNS生效延迟的问题。而且DNS负载均衡的控制权在域名服务商那里，网站无法对其做更多改善和更强大的管理。 反向代理负载均衡 反向代理服务可以缓存资源以改善网站性能。实际上，在部署位置上，反向代理服务器处于Web服务器前面（这样才可能缓存Web相应，加速访问），这个位置也正好是负载均衡服务器的位置，所以大多数反向代理服务器同时提供负载均衡的功能，管理一组Web服务器，将请求根据负载均衡算法转发到不同的Web服务器上。Web服务器处理完成的响应也需要通过反向代理服务器返回给用户。由于web服务器不直接对外提供访问，因此Web服务器不需要使用外部ip地址，而反向代理服务器则需要配置双网卡和内部外部两套IP地址。 优点：和反向代理服务器功能集成在一起，部署简单。 缺点：反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。 LVS-NAT:修改IP地址 LVS-TUN: 一个IP报文封装在另一个IP报文的技术。 LVS-DR:将数据帧的MAC地址改为选出服务器的MAC地址，再将修改后的数据帧在与服务器组的局域网上发送。 9.缓存 缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段，现在CPU越来越快的一个重要因素就是使用了更多的缓存，在复杂的软件设计中，缓存几乎无处不在。大型网站架构设计在很多方面都使用了缓存设计。 CDN: 及内容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商哪里，在这里缓存网站的一些静态资源（较少变化的数据），可以就近以最快速度返回给用户，如视频网站和门户网站会将用户访问量大的热点内容缓存在CDN中。反向代理：反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户。本地缓存：在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无需访问数据库。分布式缓存：大型网站的数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以除了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据。 使用缓存有两个前提条件， 一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中； 二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性。 网站应用中，缓存处理可以加快数据访问速度，还可以减轻后端应用和数据存储的负载压力，这一点对网站数据库架构至关重要，网站数据库几乎都是按照有缓存的前提进行负载能力设计的。 10. 负载均衡算法轮询 Round Robin 加强轮询 Weight Round Robin 随机 Random 加强随机 Weight Random 最少连接 Least Connections 加强最少连接 源地址散列 Hash 其他算法 最快算法(Fastest)：传递连接给那些响应最快的服务器。当其中某个服务器发生第二到第7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。观察算法(Observed)：连接数目和响应时间以这两项的最佳平衡为依据为新的请求选择服务器。当其中某个服务器发生第二到第7 层的故障，BIG-IP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。预测算法(Predictive)：BIG-IP利用收集到的服务器当前的性能指标，进行预测分析，选择一台服务器在下一个时间片内，其性能将达到最佳的服务器相应用户的请求。(被BIG-IP 进行检测)动态性能分配算法(Dynamic Ratio-APM):BIG-IP 收集到的应用程序和应用服务器的各项性能参数，动态调整流量分配。动态服务器补充算法(Dynamic Server Act.):当主服务器群中因故障导致数量减少时，动态地将备份服务器补充至主服务器群。服务质量算法(QoS):按不同的优先级对数据流进行分配。服务类型算法(ToS): 按不同的服务类型(在Type of Field中标识)负载均衡对数据流进行分配。规则模式算法：针对不同的数据流设置导向规则，用户可自行11. 扩展性和伸缩性的区别扩展性：指对现有系统影响最小的情况下，系统功能可持续扩展或替身的能力。表现在系统基础设施稳定不需要经常变更，应用之间较少依赖和耦合，对需求变更可以敏捷响应。它是系统架构设计层面的开闭原则（对扩展开放，对修改关闭），架构设计考虑未来功能扩展，当系统增加新功能时，不需要对现有系统的结构和代码进行修改。 衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品。不同产品之间是否很少耦合，一个产品改动对其他产品无影响，其他产品和功能不需要受牵连进行改动。 伸缩性：所谓网站的伸缩性指是不需要改变网站的软硬件设计，仅仅通过改变部署的服务器数量就可以扩大或者缩小网站的服务处理能力。 指系统能够增加（减少）自身资源规模的方式增强（减少）自己计算处理事务的能力。如果这种增减是成比例的，就被称作线性伸缩性。在网站架构中，通常指利用集群的方式增加服务器数量、提高系统的整体事务吞吐能力。 衡量架构伸缩性的主要标准就是可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来服务无差别的服务、集群中的可容纳的总的服务器数量是否有限制。 12.分布式缓存的一致性hash 具体算法过程：先构造一个长度为2^32的整数环（这个环被称作一致性Hash环）根据节点名称的Hash值（其分布范围为[0,2^32 - 1]）将缓存服务器阶段设置在这个Hash环上。然后根据需要缓存的数据的Key值计算得到Hash值（其分布范围也同样为[0,2^32 - 1]），然后在Hash环上顺时针查找举例这个KEY的hash值最近的缓存服务器节点，完成KEY到服务器的Hash映射查找。 优化策略：将每台物理服务器虚拟为一组虚拟缓存服务器，将虚拟服务器的Hash值放置在Hash环上，key在换上先找到虚拟服务器节点，再得到物理服务器的信息。 一台物理服务器设置多少个虚拟服务器节点合适呢？经验值：150。 13. 网络安全 XSS攻击 跨站点脚本攻击(Cross Site Script)，指黑客通过篡改网页，注入恶意的HTML脚本，在用户浏览网页时，控制用户浏览器进行恶意操作的一种攻击方式。 防范手段：消毒（XSS攻击者一般都是通过在请求中嵌入恶意脚本大道攻击的目的，这些脚本是一般用户输入中不使用的，如果进行过滤和消毒处理，即对某些html危险字符转移，如“&gt;”转译为“&amp; gt;”）;HttpOnly(防止XSS攻击者窃取Cookie). 注入攻击：SQL注入和OS注入 SQL防范：预编译语句PreparedStatement; ORM；避免密码明文存放；处理好相应的异常。 CSRF（Cross Site Request Forgery，跨站点请求伪造）。听起来与XSS有点相似，事实上两者区别很大，XSS利用的是站内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。 防范：httpOnly;增加token;通过Referer识别。 文件上传漏洞 DDos攻击 14. 加密技术摘要加密：MD5, SHA对称加密：DES算法，RC算法， AES非对称加密：RSA非对称加密技术通常用在信息安全传输，数字签名等场合。HTTPS传输中浏览器使用的数字证书实质上是经过权威机构认证的非对称加密的公钥。 15. 流控（流量控制） 流量丢弃 通过单机内存队列来进行有限的等待，直接丢弃用户请求的处理方式显得简单而粗暴，并且如果是I/O密集型应用（包括网络I/O和磁盘I/O），瓶颈一般不再CPU和内存。因此，适当的等待，既能够替身用户体验，又能够提高资源利用率。 通过分布式消息队列来将用户的请求异步化。 转载:http://blog.csdn.net/u013256816/article/details/51563564另外收藏:亿级Web系统搭建：单机到分布式集群 :http://blog.csdn.net/u013256816/article/details/48707505]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[你还在用jQuery？]]></title>
      <url>%2F2017%2F03%2F27%2F%E4%BD%A0%E8%BF%98%E5%9C%A8%E7%94%A8jQuery%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[【 重新认识 - Jquery 是什么 】jQuery简写 jq ，汉语 鸡 课 外 瑞，具体来说，他是一个JS库 ，并不是人人常说的框架，库不能称之为框架，框架是解决方案的轮子、架子，库一般来说是一个语言浓缩和优化过后的超集或者工具包，其实ES6 更像是ES5的超集和库。 jQuery的诞生背景背景：Query 查询的意思, jQuery就是用javascript更加方便的查询和控制页面控件。由善于思考并且很懒的美国佬 John Resig 创造并维护。 jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。 几乎无所不能，而且想要多懒的写法就可以多懒的写法，因为它支持链式写法，而且对css样式支持接近完美。 Jquery 的意义和作用jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。 jQuery兼容各种主流浏览器 或者说所有的浏览器，它的其中一大目的，就是为了对付鱼龙混杂的兼容问题，所以对各个浏览器都可以轻松应对，而不用管原生js是否支持。直观对比 ：获取一个dom节点123//可爱的 javascript ：document.getElementByID(&quot;id&quot;)；//牛鼻的 jQuery： $(&quot;#id&quot;)； 直观对比 ：操作css样式1234//可爱的 javascript ：好大一串我去document.getElementById(&quot;id&quot;).style.color=&quot;#ff0000&quot;；document.getElementById(&quot;id&quot;).style.background=&quot;#000000&quot;；document.getElementById(&quot;id&quot;).style.display=&quot;block&quot;； //牛鼻的 jQuery：就像写css一样写就好了123456 $(&quot;#id&quot;).css(&#123; &quot;color&quot;:&quot;#ff0000&quot;, &quot;background&quot;:&quot;#000000&quot;, &quot;display&quot;:&quot;block&quot; &#125;); 直观对比 ：获取一个元素的属性123456//可爱的 javascript ：获取，设置document.getElementByID(&quot;id&quot;).getAttribute(&quot;href&quot;)；document.getElementByID(&quot;id&quot;).setAttribute(&quot;href&quot;,，&quot;www.xx.com&quot;)；//牛鼻的 jQuery： $(&quot;#id&quot;).attr(&quot;href&quot;,&quot;www.xx.com&quot;); Jquery 的好处和缺点好处：不言而喻，经过上边的对比得知：它优秀的设计思想和实用容记的语法 都让他立于不败之地将近10余年。它是2006年一经推出，就火速得到各界的好评和世界各大大量项目的深度应用，至今网络70%的绚丽效果和插件都是它的功劳，可见普及度和好用程度多么亲民。 以下几点摘自 某百科（反正大家都知道 大同小异，不多做介绍） 1、快速获取文档元素jQuery的选择机制构建于Css的选择器，它提供了快速查询DOM文档中元素的能力，而且大大强化了JavaScript中获取页面元素的方式。 2、提供漂亮的页面动态效果jQuery中内置了一系列的动画效果，可以开发出非常漂亮的网页，许多网站都使用jQuery的内置的效果，比如淡入淡出、元素移除等动态特效。 3、创建AJAX无刷新网页AJAX是异步的JavaScript和ML的简称，可以开发出非常灵敏无刷新的网页，特别是开发服务器端网页时，比如PHP网站，需要往返地与服务器通信，如果不使用AJAX，每次数据更新不得不重新刷新网页，而使用AJAX特效后，可以对页面进行局部刷新，提供动态的效果。 4、提供对JavaScript语言的增强jQuery提供了对基本JavaScript结构的增强，比如元素迭代和数组处理等操作。 增强的事件处理jQuery提供了各种页面事件，它可以避免程序员在HTML中添加太事件处理代码，最重要的是，它的事件处理器消除了各种浏览器兼容性问题。 5、更改网页内容jQuery可以修改网页中的内容，比如更改网页的文本、插入或者翻转网页图像，jQuery简化了原本使用JavaScript代码需要处理的方式。 缺点：极度依赖dom节点，要引入第三方jquery文件额，而且是一大坨。版本参差不齐，虽说解决了浏览器之间的兼容问题，但却出现了jquery版本之间的用法冲突等。 1、现在的jQuery太臃肿了，有很多用不到的功能。所以现在有了很多精简jQuery的项目。如 zepto.js 2、对jQuery的过度依赖，目前大部分前端和后端人员极度依赖jQuery的写法和应用，以至于离开jQuery压根不会写JS，在一定程度上变成了一种悲哀。 3、全DOM操作，钩子往往会依赖标签，如果依赖jQuery来搭建页面的话（比如后台输出json，然后jQuery loop一个列表出来），维护上会有困难。一旦改动改页面结构，很多依赖标签的选择器，一改起来js那块就得跟着大改，或者改动json 数据格式，dom也得跟着改动，改版是一件万分痛苦的事。也就是解耦性太紧了。是基于事件驱动不是基于数据驱动，数据结构一旦变化，view层就要重新维护。 4、避免不了大量手拼html字符串（标准dom方法除了innerHTML这一历史遗迹，是完全没有直接插html的api接口的），从根本上解决不了XSS攻击隐患。这确实也是jQuery的一个缺点。 那么，我们简单回顾了一下，让众多程序员跨过一个时代的jQuery神器，那么我们这系列文章的真正目的是什么呢？ 如标题所言：你还在用 jQuery? 我是在反问你啊 大胸弟，大胸妹 你们有没有想过一个问题，现在前端到底是一个什么样的时代呢？ 前面我们说了 会用jQuery 你还不叫前端好吗？大部分后端都比你玩的6啊，因为好多效果和应用各种复制查询就可以啦，也导致各种可笑的代码层出不穷，鱼目混珠。 【 jQuery过时了吗 】这是个伪命题，但却是个很亲民和讨论意义的话题。过时：如果是指被用得少了，或者大部分人已经在讨论是不是过时了，那肯定是在过时。 我的观点是：第一选择已近过时，但开发思想永为经典。虽然jQuery官方不愿承认，而且一直在跟随潮流做很重要的更新，甚至有了mvvm概念的框架用法加入其中还出了jquery mobile 等移动端定制库，不过很遗憾，越来越多的项目抛弃了jquery，因为它的历史使命已经完成了。 但不会完全过时，它的思想是影响整整一代的，现在就算 angularjs、 vuejs、reactjs在实际开发中，还是少不了dom操作，毕竟你怎么可能完全脱离dom呢？ 作为一个库，jQuery能在计算机软件领域存在十余年，绝非偶然。它的选择符、易用的API、跨浏览器兼容、DOM元素批处理、插件提供的代码复用等等，个个特性都有强大的理论支持和实际场景的良好应用。 时代在进步，思想在进步，web前端发展这么多年也终于有了大范围的变化。现在的vuejs、angularjs、react大行其道，而且各种教材刺激眼球，还有各种大神的安利文，那么跟着我来看看这种类型的框架是怎样的一个东西。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[马云环球转型论坛压轴演讲全文]]></title>
      <url>%2F2017%2F03%2F24%2F%E9%A9%AC%E4%BA%91%E7%8E%AF%E7%90%83%E8%BD%AC%E5%9E%8B%E8%AE%BA%E5%9D%9B%E5%8E%8B%E8%BD%B4%E6%BC%94%E8%AE%B2%E5%85%A8%E6%96%87%2F</url>
      <content type="text"><![CDATA[大家下午好。可否再把灯光调亮一些？我想看到大家的脸。我会害怕对着黑乎乎的一片说话。这次的行程有很多很棒的对话，我感触很深，让我想起了很多在我身上发生的事情。 一：乐观、坚持、不抱怨，才有机会首先，我想说，我并不是个有天赋的人，我也没有受过培训。我也从来不听从妈妈或者老师的话，我会说，不不不，我从不这样听话。 如博尔特前面发言所说，教练告诉他的每一件事情，他听了就相信。而对我来讲，从媒体上或者从其他人那里听来的事情，我会花2-3秒钟思考，这是对的吗？我能否做些不一样的？这是我自己培养的习惯。我不是一个有天赋的人，因为我失败了很多次。我试了7年才完成中学、人家用了5年，这是很糟糕的。每一个人都试着进大学，进好的中学，但我们都曾失败过，我是失败者中的一员。我想进重点初中，重点高中都失败了，考大学我失败了3次，然后申请工作我失败了差不多30次。我记得，当我高中毕业的时候，我没考上大学，我想在KFC找一份工作，24个人去了，23个人被录取，我是唯一没有被聘用的。 然后我试着去考警察，5个同学去，4个被录取，我又是那个没被录取的。当我们开始阿里巴巴创业之路候，我试着去融资，我去了硅谷，和投资人对话，我见了超过30个投资人，没有一个愿意投给我们。 但是我觉得很有趣的事情是，我们犯了那么多错误，每一次失败，每一次被别人拒绝，我都把它当作一次训练。今天，当有人说，哦，我很失望的时候，我不觉得我是被这个公司拒绝了，我不觉得我失败了。对于我来说，如果被人拒绝，这是很正常的事情，你被别人接受才是并非顺理成章的事情。 当我开始做生意，尝试销售，每天我都给陌生人打电话、出去见客户。出门之前我都告诉自己，我要见12个客户，我都不会有机会赢的。一个机会都没有。然后当我回来，确实没有机会，我说，看，我是对的吧，我就知道没有机会。但是如果我赢了一个客户，我就是比预期做得好。所以每一次，我们犯的每一个错误，都是一个很好的令你将来成功的宝库。 有许多关于马云的书，关于阿里巴巴的书，但所有这些书都不是我写的。我不认为我应该写一本书。当有人开始写一本关于自己的书，那就是他老了，该退休了。 但是如果有一天，我真的想写一本书，书名将是《阿里巴巴和1001个错误》。 是错误使我们与众不同。每一次我们犯错，我们学习，检查自己。其实我们每一个错误、每一次失败都是自己的错。如何改正，如何下次做得更好。在中国，我开始和很多企业家分享我的经验和想法，我想告诉他们从别人的失败中学习。我的培训过程就是失败的经历。你知道，我接受的培训是做一个高中老师，我一天都没有经历过商学院的培训，我绝对不是被培养成为一个MBA的学生。 这些年我看到很多人去学MBA。他们去之前非常聪明，但回来时都变蠢了。因为他们想，这是教授教的，这是经济学家讲的。他们去之前思维非常活跃，但回来时好像被僵化了。 我在中国设立的湖畔大学是培养企业家的，我们用的大部分案例都是失败的故事。为什么失败。大多数人都会失败。如同在战场上，生存下来的人才是赢家。所以当你做生意的时候，你得从别人的错误中学习。不要担心，大多数错误，你会觉得那个家伙怎么那么傻，他怎么能犯这样的错误。其实你也会犯同样的错。你会的。所以我努力教我自己。我读过很多很多的案例，人们为什么失败，我不断地意识到，这家伙这么聪明，而他失败了，为什么我会有机会赢。你了解越多，你越会变得积极。 另外我想和大家分享的是，要用自己的思想来思考。你的教育，你的背景以及你拥有的经验都令你变得与众不同。你不应该永远跟随别人走, 你应该遵循自己的规则。 当我要与有经验的人竞争时，我对自己说，等等，请给我30年。他会变老，我就拥有了机会。当我与比我富有的人竞争时，我可以做任何事情，我对自己说，15年后，我可以准备，让我们再竞争。所以，你总是有机会获胜的。 如果你真的不太可能遇到世界上很多成功人士，那么我们来看看他们是怎么成功的。比尔?盖茨，沃伦?巴菲特甚至史蒂夫?乔布斯，很多人。我发现成功的人都拥有具有魅力的性格。像侯赛因波特一样。他们乐观，他们从不抱怨。如果你不乐观，你就没有机会赢了。如果你抱怨，我年轻时会常常抱怨。我抱怨道，当我想做软件，比尔?盖茨已经做了。我想做这个，那个家伙也已经做了。当我想做鸡肉时，肯德基比我们做得更好。而且我们总是想像比尔?盖茨一样成功，但这是不可能的，这世界上只有一个比尔?盖茨。很多像你一样的人会说，比尔?盖茨没有完成哈佛学业，我也应该离开哈佛。但是只有一个比尔?盖茨。 所以，我发现那些总是乐观的人,他们总是看到更光明的未来，他们甚至不会抱怨。因为当人们抱怨的时候，他们正在失去机会，并且被抱怨遮挡了思想。所以我从这其中学到了，机会何时出现？当世界充满了抱怨的人，那么这个世界处处都是机会。你可以解决人们抱怨的问题，那是个很好的机会。而且我发现我的很多高中、大学朋友，这些年我遇到他们，唯一发现的是，他们总是在抱怨。 请不要笑，我们有很多人都在抱怨这个世界。这就是为什么这些人永远止步不前，我们必须考虑，我们如何解决这个问题。所以，我认为世界变化如此之快，我们无法阻止。这是最好的时光，也是最糟糕的时候，都取决于你的态度。 我认为这是本世纪最好的时光。此时人类从未如此幸运。有一天你看到金融危机发生了，你拥有了这个，你拥有了那个，你会面临各种各样的问题，但我看到的是，这些都意味着大事件正在发生。在这个时代，我们很幸运，在这一刻，我们就是他们。 二：未来30年才是互联网时代首先，我认为三次技术革命都从根本上改变了世界。第一次技术革命，工业革命改变了世界。生活在那个时代的人们很幸运。第二次技术革命也是如此，为人类带来了大量机遇。现在是第三次，我们很幸运。每一次技术革命发生，社会都会有巨大的动荡。它会摧毁很多工作机会，但也带来了大量工作机会。 相信我，我所学到的一点是，每一次技术革命大约需要50年。前30年是关于技术本身，后30年是这种技术的使用、这种技术的应用。所以，第一次，第二次，这是第三次。 互联网刚刚过去了30年。未来30年对任何国家、对任何人都至关重要。无论你喜欢与否，会有大量好工作，今时今日你所认为的那些好工作会消失。 新的事物正在发生，有趣的事物正在发生。所以，如果你还记得，过去20年被称作互联网技术，未来30年被称作互联网时代。这正是我想要对所有年轻人发出的号召。请留意那些30岁以下的人，留意那些少于30人的公司。我认为阿里巴巴能够成功的原因，正是19年前当我们开始这项事业，以及15年前当我们开始做淘宝、开始B2C模式的时候。说服人们来使用这项服务在当时非常困难，尤其是新服务，没有人想要尝试。 不成功的人们、想成功的人们，让我们来帮你。所以有一些重点，美国企业来到中国，他们触达到了成功者。我们认为我们应该帮助那些不成功的人，聚焦在年轻人身上，从他们18岁甚至15岁开始。 在过去的中国，在古老的历史中，如果你能说服长者，年轻人就会跟随。而在今天，如果你说服了年轻人，那么父母将会跟随。如果你改变了年轻人，你就改变了未来。如果你相信未来，相信年轻人。所以15年前，我们将大部分时间投入到20岁以下的年青人身上，如今他们已经35岁了。他们上网获取资讯、上网购物、上网做生意，都是理所当然的。 所以我们认为，再给他们10到15年时间，他们将成长为部长，他们将成为总统，届时世界将会发生改变。所以这是我们所相信的，我想告诉在场所有的年轻人，这是你的时代。在这个世界，很多人抱怨互联网摧毁了大量的生意，但并不是互联网摧毁了生意，是落户的思维、态度、封闭自己、落后思维，是这些想法摧毁了他们自己。我想说的是，人们说技术摧毁了就业，我说不，每一次技术革命都会创造更多的就业机会，比人们想象得更多，技术创造出了不同的工作。这是我们、这是中国和亚洲的机遇。 马云：我不喜欢人工智能，机器应做人做不到的事 3月23日，马云在马来西亚与创业者交流。 三：五个新将会改变世界我认为有几种新技术、几项新趋势将会改变世界。比如新零售、新金融、新技术、新制造以及新能源。 这五个新即将发生，即将在未来10至20年改变每一个人、每一个行业、每一家企业。那什么是新零售。今天我们说电子商务。中国正在快速增长，但传统零售业运作不佳。中国电子商务增长如此之快，增速超过美国的原因之一，就是美国的传统零售业非常之好，基础设施业务非常之好，互联网无法渗透进去。但在中国，传统零售业做的并不好。我认为马来西亚、印度尼西亚也是如此。因为这种不好，互联网成为一种新技术，我们就利用互联网来优化新零售，并且让它迅速成长。 所以我说，在那个时候，电商在美国只是一道甜点，而在中国是主菜。什么是新零售，它意味着线上，线下加上物流，所有这一切融合在一起，才是新零售。所以在未来的10-15年，不再有所谓的线上，线下生意。所有的线上线下将在未来融合在一起。 什么是新制造。在过去的几个世纪，制造业意味着可扩展性。越大的规模越好。但当你看到沃尔玛, 你看到流水线，标准化和低廉的人工成本。这个世纪会定制化，每一样东西都应该是定制化的，智能化制造的。很多事情将会改变。当你在一部电话装一个操作系统，打电话只占了20%的使用。今天，80%的时间，手机并不是用来打电话的。 想象一下，如果我们在汽车上装一个操作系统，或者我们一个操作系统内置于一盏灯，一个电冰箱或洗衣机，世界就发生改变了。所有的事情都会产生结果。同样的，新制造将让很多行业发生改变。今天，如果你的行业是基于流水线，标准化，低成本，低价值，低价格，你不会有未来。 第三个是新金融。在过去200年，金融行业试着聚焦在20:80的方式上。他们做的所有事情只是为了那20%的人群，大公司，跨国企业，富有的公司。他们不在意剩下这80%的公司，或者那些没有金融服务支持的中小企业。所以，新金融运用数据技术，运用新科技，赋能这从未被顾及的80%的中小企，及那些一直没有触达的消费群体。这是互联网带来的改变，我也相信很多大型银行，传统银行会转为拥抱这样的改变。 今天，传统银行业不是为80％的市场服务的，也不是为80％的消费者服务的；但是这股新浪潮将比你想象还要来的快。移动技术，移动支付，来看看今天的印度，在短短两年内，我们在当地的合作伙伴已使用手机支付普及了两亿人，他们用手机来支付和取钱。所以，如果你使用传统的方法，这几乎是不可能在两年内发生的。那么，新的金融机构将会改变这个局面，新的金融体系将会改变这个世界。 接下来是关于新技术。在亚洲，我们错过了信息技术（IT）时代，今天我们在数据技术（DT）时代。我看，从IT时代到DT时代。这是完全不同的概念。IT试图让你变强, 赋能自身。而DT则是为了使其他人变强。DT是如此强大，所以在IT时代，亚洲失去了机会。我们没有IBM，我们没有微软，我们没有思科，我们没有Intel芯片。但在DT时代，我们有机会获胜。我认为，对于亚洲与小企业来说，特别是互联网技术落后的国家，这是我们的机会。今天我们的手机比20年前强大的个人电脑更加强大，来看看亚洲，看看马来西亚、印度尼西亚、菲律宾，如此多的农民都在使用手机。如果我们可以使用移动技术，收集数据，事情将发生改变。 所以我们应该努力用DT实现发展，而不是使用IT的方式。什么是移动技术？什么是数据技术？什么是人工智能或机器学习？这些是我所思考的事项，亚洲人可以从中发现很好的机会。 另外，最后我想说的一件事是，新能源。第一次技术革命的能源是煤炭，第二次技术革命是石油，这个世纪、下个世纪的能源是什么？是数据。没有数据，任何事情都无法做成。而且我想告诉在场的所有年轻人，不要说你没有像你的父亲那样的机会。你父亲可能没有“五个新”所带来的机遇。如果你从现在开始学习，从现在开始准备，你可能在10年后取得成功。也许你无法在明天成功，但如果你准备好了，如果你相信未来、相信技术、相信技术革命将会改变世界。现在就做。 10到15年后回首，今天的你并非由昨天决定，而是由10到15年前你所做的事情、你的努力所决定。 所以，15年之后你的生活，正是今天你的决定和努力所决定的。 四：技术革命是未来三十年的变革这就是我所坚信的。我们无法选择出生在怎样的家庭。如果你碰巧出生在比尔?盖茨家族，你很幸运。但不可能。我们无法决定出生在何处，但我们可以决定我们死在何处、以何种方式死亡。如果你想死在监狱里，很简单。如果你想去世时有很多朋友，你必须交到很多朋友，你必须改变你的性格、你的价值观，所有这些事情。而我知道，我不想死在我的办公室里，我会退休，我会死在海滩上。 生活不是关于工作。生活是你来到这个世界，在这里的一段旅程。我相信我们来到这个世界是来度假的。好吧，我想还有一件事不管你喜不喜欢，就是这个世界的变化比你想象的快得多。很多事情会改变。正如我说的，很多白领的工作正在消失。所以你看，如果你是做数据分析的人，你正在学数据分析，数据分析将是热门工作。但是我要告诉你未来十年会没有数据分析。 机器将会比你做得好得多。过去的20年中，我们把人变得像机器，未来20年,我们将让机器变成人。机器会人更强大，比人聪明。我认为，八年前我告诉我的团队，我说30年后，最好的年度首席执行官、《时代》杂志的封面将是一台机器。不管你喜不喜欢，我们看吧，如果我们还能活30年。因为在过去的几个世纪，人们专注于生意，专注于制造。 未来30年的业务核心在于创造力。因此，很多事情已经改变了。教育，我们教育孩子的方式，我认为不能只教知识。机器学知识更快。人们比较谁更聪明，这个人可以记忆力很好，记得每个字、每句话，他非常聪明，能记得所有东西。我告诉你，机器的记忆比你好。它们可以快速计算，机器的计算比你快，机器永远不会生气、永远不会累，而且总是能比你做得更好。所以，如果将来你想与机器竞争，谁更有才能，你不可能会赢。 要如何与机器竞争？我认为，我们应该教会孩子文化、价值观。 我认为这些是人类可以胜过机器的东西。这就是为什么我们应该教会我们的孩子两件事情， 教育的重点是想象力、创造力和团队精神。 我们应该教孩子音乐、运动，运动让孩子们明白什么是团队合作， 音乐和绘画让人们了解什么是想象力和创造力。如果我们不改变我们教育的方式，我们会面临很大的麻烦。 我们的孩子会抱怨。这不是他们的错，而是我们的错，是我们没有这样做。 所以我相信，未来不会是知识的竞争，而是智慧的竞争、经验的竞争，在这样一个移动互联网时代、这样一个复杂的世界中生存下来。 今天人们担心机器变得更聪明，它们下棋比我们好。天哪！我要怎么办。我从来不为此担心。为什么要担心呢？机器，我不喜欢人工智能，这个世界，对我来说，人工智能就是阿里巴巴的洞察力。这不是人工智能。人工智能是如果你尝试教一台机器做一些人类可以做的事情，这只是对人类的侮辱。机器应该做人类做不到的事情。这才是我们应该做的。 所以，我相信这不是人工智能，应该叫机器智能，因为只是做一些人类不能做的事情。就像汽车一样，我们知道汽车可以比人类跑得快，但是我们从来不会做一部模仿人类的汽车。如果你把轮子设计得像人类的腿，它不可能跑得快。因为它是轮子，而人类没有轮子。让我们做些不一样的东西，计算、大数据以及其他所有的东西，我们必须非常明确人类不是机器，我是一个乐观的人，我们永远能胜过机器。不用太过担心。我从不担心科学家们担心的大部分东西，我从不担心总理们担心的事情，我只担心我会担心的事情。因为在阿里巴巴，每天要担心的东西已经够多的了。 五：企业家是社会科学家和艺术家二者合一接下来我想说的是，年轻的商人、年轻的企业家，我听他们说我没有李嘉诚那样的机会啊，我没有郭鹤年先生那样的机会啊。我告诉你一件事，他们在被称为企业家的时候可能没有你这样的机会。什么是企业家?我的理解是，企业家是社会科学家和艺术家二者合一。你必须是一个社会科学家，你必须了解人，人的行为，人的需要，你必须改变自己。企业家也必须很艺术。如何组织团队?马云成功的原因并不是我很聪明。我认识一些很了不起的人，知道如何与别人一起工作。那些了不起的人和我将了解社会和人们的需要。所以如果你想让你的公司更成功，你必须展示出你为社会解决了什么大问题。你为社会解决的问题越大，你的机会就越大。你就会更成功。 如果你为你的村子解决了问题，这就是一个村庄的公司。如果你为你的省份解决了问题,它就是一个省份公司。如果你为国家解决了问题，你就是一个国家企业。这个责任取决于你如何为之工作。企业家会如何转型？企业家将会互联网化，成为互联网化的企业家。我相信在未来20到30年，至少90%的生意将会在线上。如果你不知道如何在网上做生意，如果你是一个小生意,你只能做本村的生意。而且你的业务规模取决于你所在地区能触达多远。所以今天当你使用互联网,你可以接触到全世界的其他地方,跨国家、跨省。你知道,尊重其他文化,为别人创造价值。 未来30年，世界不属于互联网公司，而是属于那些能更好地使用互联网的公司。这是我们的机遇。你不需要懂技术，但是你要知道怎么用技术，并且运用好技术。我并不会尝试去做一个工程师。直至今天，我不了解电脑为何能运作，我仍然不知是什么原因。不知道不要紧。我觉得只要你懂得赏识和欣赏懂技术的人，让他们了解这些。 我曾经是一个小企业的产品测试员。世界上大多数的小企业都很畏惧高科技。当他们听到高科技这个词，他们会避而远之。我会是产品测试员，当工程师完成一个产品，我会来试用。如果我不能用，我相信80%的人都不能用。把它当作垃圾扔掉。如果我可以用，说明是一个好产品。我不希望手动调节任何东西，我希望是简单轻松的点一下，就完成，得到你想要的。 六：要想成功，必须具备情商、智商和爱商然后人们说，你是一个企业家，你要有钱。钱不是必需的。不是钱改变世界，如果钱能改变，就没有我们的机会了。阿里巴巴在第一个10到15年存活下来的重要原因，是因为我们没钱，尤其在第一个5年。我们不像其他公司一样融资到那么多钱，我们每一分都花的很小心。大多数的公司，在泡沫时代都阵亡了，不是因为他们没有钱，而是因为他们有太多钱。你想要聘用大公司的优秀人才。如果你的公司没有准备好，你却请了比如跨国企业的专业人才，你等于是在谋杀自己。不要这么做。这就好比是我们把波音747的引擎装进一个拖拉机，它会毁了你的拖拉机。相信我，我在这上面犯过很多错误。所以，当你没有钱的时候，你不会犯同样愚蠢的错误了。最好的人才不是在外面，而是在你的企业内。 他们相信你，相信你的想法，所以愿意花时间。很多人喜欢把钱投资在设备和机器上，但不愿意花钱在雇员身上。 把钱投在雇员身上，给他们机会发展，和他们分享所犯过的错误，听听他们的错误，一起工作，这将使你的企业发展的更好。 人们会说，哇，阿里巴巴是如何找到这么多人才的？ 15年前，当我们成立这家公司时，在头三年里我们不能雇用任何人。人们说，互联网，阿里巴巴，多么奇怪的名字。 我们没有钱，没有乐趣，是无名之辈。 所以我们说，我们很难雇到人，我们只雇用那些没那么残疾的人。 在中国的公司里，几年后当人们有一定资历时，变得强大时，他们开始被猎头看中，猎头开始在我们这里寻找人才，他们把我们的优秀人才挖走了。 那些好的人，都被挖走了。 那些不那么好的人，没有人去挖他们，他们留在了公司，变得非常成功。 据我了解，培训中最好的是，人们说：“他是互联网专家”，甚至在DT时代到来之前，我们已经有了很多数据专家。我不知道数据专家在哪里。所以，我认为没有人是熟知未来的专家。未来的专家是你自己从所花的时间和从经历的磨炼中学习得来的。 所以，这是我所相信的未来，我相信在未来，智商（IQ）和情商（ EQ）都是必须的。如果你想成功，你应该有情商，但如果你不想失败，你应该有智商。这是有区别的。你想成功，你必须拥有情商，因为这些情商很高的人，很容易完成交易，因为他了解人们并和大家一起工作，但很多人因为缺乏智商而犯错误。不管你多聪明，世界上还有很多比你聪明的人。所以如果你想有最好的智商，雇佣智商高的人。人才是决定因素。与他们一起合作的同时，提高了你的智商。第三，如果你想得到尊重，很多人赚钱，但没有得到尊重。我们有很多这样的人。那就关乎爱商（LQ）。 所以对于想成功的人来说这些问题至关重要。智商、情商、爱商。 七：DT时代的重要特征是体验另一点是世界正在变化，我认为在未来的30年中，它不是力量的竞争，也不是知识的竞争，而是用户体验的竞争、对他人关怀的竞争 - 你能如何赋能你的员工，如何赋能其他人、赋能客户和赋能女性。女性越来越重要，我们公司的秘诀之一就是女性，我们的女性员工占比达到47%，高级管理人员中有33%是女性。我从来不觉得这有何奇怪。有一次，一位来访我们办公室的美国记者问，Jack，为什么你的公司有这么多女性？我说，是吗？我从来没有意识到。互联网，这就是我们在互联网上能成功的原因。 有趣的是，如果你有很多工程师，但也许没有具有创造性和关怀他人的女性 。女性比男性更加关怀别人。男人关心自己的权力、升职和加薪。女性照顾孩子、父母和丈夫。她们知道如何改变自己，来确保他人也能好。如果你有这样的品质，你就有成功的机会。所以我认为21世纪的女性领袖会是这样的。不是政治领导人，不是商界或文化界的那些领导人。我坚信，如果你想让公司可持续发展，那就聘请更多的女性吧。 我不是像政客那样说话，我用我们的公司证明我的话。我们这个公司，在中国，高科技公司，近50%的员工是女性，33%的高管是女性。顺便说一下,我们有超过50%表现很好的线上卖家是女性。在传统的方式里，女性成为一线卖家是没有机会的，但是在互联网上人们只关心你能不能提供更好的服务。他们不会说，啊，这是个女人。 最后，在我们回答问题之前，我有很多东西要与大家分享，很抱歉我说了那么久。当我有机会跟企业家说话的时候，我总觉得就像和自己谈天。我与小企业、年轻的企业家谈话的时候会觉得很舒服。与企业家说话的时候,我感觉，我们是同种动物。跟大公司说话的时候,他们谈的是竞争、收入和利润。当我跟小企业说话的时候，我们谈论的是梦想。我们谈团队，谈客户。这场技术革命是非常可怕的。这取决于我们如何使用它，如何一起工作来解决重大的社会问题。 第一次技术革命改变了世界，却引发了第一次世界大战。第二次技术革命同样影响了世界，也同样衍生出了第二次世界大战。今天，我们正处在第三次技术革命中。第一次技术革命让人们的双手，双臂，双脚都更强大，。第二次技术革命，人们开始远程旅行，火车，飞机，大家希望获得更多东西，人变得贪婪，去到宇宙，登月，但这次技术变革是在这个世界之内的变化。 人们应该了解自己。今天，我们去月球，我们试着探索火星，我们从来没有看到人类内部。我觉得，这次的革命是解放大脑的。如果我们不能很好地处理这个事情，它会变成世界的大麻烦，第三次世界大战会发生。这个战争不会是在人之间发生，而是人们与贫穷，与环境，与疾病的抗争。这些事情，如果我们善用技术和数据，人类会变得更好。 所以我认为，对于互联网以及未来30-40年的电子商务来说，如果你想让你的公司去帮助别人，那么整个商业世界都将是包容的。 商业世界将是可持续的，让人们感到快乐和更加健康。 这就是未来。你的公司将会很棒。 所以我将其称之为幸福与健康，即Double H战略。 这是所有人类所追求的。 你所做的一切，都是因为数据和技术。 如果你能使你的雇员、团队以及客户快乐、健康以及可持续发展，那么你的公司将前途无量。谢谢大家。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[产品经理工作的基本开发流程]]></title>
      <url>%2F2017%2F03%2F24%2F%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[1 引言1.1目的基于现在的开发流程中缺少的环节进行补足，使得开发流程更加的流畅和正规化，以便以后的查阅与归档使用。面对互联网行业中激烈的竞争，让我们的开发流程更完整、更有效率，产品才能脱颖而出。 1.2范围本文档适用于产品的研发，主要流程包括：产品需求、交互原型、视觉设计、资源输出、前端开发、后台开发、测试等环节。以后的产品开发流程也可以参考此文档的环节进行开发。 1.3 读者对象本文档的目标读者对象包括： 需求工程师：主要根据文档来提供给相关人员需要的文案，给出相应文档。 交互设计师：根据文档设计原型图，并查看需要产出的资源有哪些，怎样与产品、 开发人员合作。 视觉设计师：根据详细设计文档作为视觉设计的步骤和资源产出的依据。 前端工程师：根据详细设计文档中提供的资源编写代码。 测试工程师：根据详细设计文档来核实页面内容与软件实现效果是否一致。 2 需求整理需求文档由产品经理负责编写，应整理完需求输出一份《产品需求文档》和《设计文档》。 2.1人员评估2.1.1 参与人员产品经理2.1.2 时间节点由产品负责人规范产品功能需求文档产出的时间节点。2.1.3 预估工作量由产品负责人规范产品功能需求文档产出的工作量。 2.2 确定产品功能在拿到一个新的产品以前，产品经理应该把需求进行一次整理，看哪些是真需求？哪些是边缘需求？哪些是伪需求？进而把功能点、产品卖点思路整理清晰，再有条件的情况下做一份《市场需求文档MRD》。 2.3 编写需求文档PRD编写需求文档的时候给不同的人看，具体的内容由产品经理产出，产品需求文档主要给软件开发、测试人员、外部人员查看。 2.4 编写设计文档设计文档主要是用于设计人员在画图之前对整个产品的把握。设计文档由产品经理主写，交互人员辅助。因为产品在写文档时候的角度是在站在写程序的方向写的，设计人员要把交互原型所需要的东西提交于产品经理，辅助完成设计文档，PC端和移动端的设计文档要分开来编写。设计人员需要做：把产品原型图需要的内容提交给产品经理，并辅助产品经理完成编写。产品经理根据设计人员提供的要求需要提供以下内容： 功能类：功能流程图 、产品的功能点、主要功能卖点。 模块的内容：文字文案、各功能描述、弹出框内容文案，各模块之间关系。 逻辑类：各模块业务逻辑、结构框架图。 功能流程图示例：在有一些比较复杂的流程的时候，怕开发人员或是设计人员不是能理解的情况下，要把流程图画出来。但是一个完整的项目只用一个流程图是不可能完成的，所以需要按照模块的流程逐个进行分类，分类以后按照功能的不同、简易程度，分别画出流程。 3 交互原型交互原型是在设计文档评审通过后，安排页面上每个功能的具体位置，交互方式和跳转方式，由产品经理输出全部交互原型图、原型图解释文案，如没有产品经理由设计部门完成。 3.1 人员评估3.1.1 参与人员由产品经理完成，如没有产品经理可由设计部门完成。 3.1.2 时间节点 在设计文档评审没有问题的前提下，开始交互设计，然后根据时间具体安排 3.1.3 预估工作量 按照不同平台和具体完成的时间来评估工作量。 3.2 制作交互原型图目标观看人员：测试人员、视觉设计人员、前端设计人员等。 交互原型图具体要求： 不要加入视觉设计的元素。着眼于大局，不要纠结细枝末节。 工具不限，产品经理最好用axure完成动态，如没有，需设计人员用AI或ps完成。 按照页面流程中所考虑的交互过程，体现在原型上面。出错，提示等交互细节也应有体现。 3.3 原型图解释文案在画交互图的开始就要记录下来。 解释文字具体要求： 每个页面之间的联系，承接关系。 页面当中的细节跳转，按钮的不同状态，弹框的提示文字，日历的跨年跨越显示效果，小数点是否保留(若保留，保留到后几位数字）等。 或是在不同情况下按钮的使用情况。 4.视觉设计在交互评审通过后，负责把控UI整体风格和所有视觉效果的设计，主要输出：VI选择的方案、所有视觉效果图、资源包等。 4.1人员评估4.1.1 参与人员 UI设计人员 4.1.2 时间节点 在交互原图评审通过后，按照项目复杂程度在来具体安排时间节点 4.1.3 预估工作量 按照不项目复杂程度和具体完成的时间来评估工作量。 4.2 视觉识别系统在一个项目开始之前，这是任务是必须要做的，除了延续性的项目，以后给每一个项目都要做这个视觉识别，不是设计师脑中的印象而是要落实到文档与图片展示。 由UI设计人员做3套以上UI设计方案，方案包括:颜色、logo、整体风格、icon等效果图，然后开会评审确认其中一套风格，评估确认后方可进行接下来整体的界面设计，这样避免了一个人接受项目以后交接给别人视觉上会有偏差的问题。另一个是解决了项目后期的问题，比如以后宣传单、手册设计或是名片设计，都是一种风格一种颜色。 4.2.1 颜色的设定 颜色的设定要有理有据，开会的时候会有很多人会问你为什么要用这个颜色，这个颜色代表什么，这些最好在做设计的时候就要想好。 举个例子： 当我们拿到一个项目的时候交互是已经完成一小部分了，我们可以拿着这一小部分进行设计定位，这时候我们 需要了解的是：这是一个什么类型产品？这个产品的目标人群是哪些？这个产品的年龄段是哪些？这个产品的 生命周期是多久？ 4.2.2 LOGO的设定 一般情况下我们公司不需要做logo，但是如果有需要的话就要按照logo的制作流程进行设计。 主要内容有：logo的设计思路，logo的颜色、logo的应用场景等。 4.2.3 整体风格的设定 整理风格设计是需要做颜色、板式、icon等系列的设计。在整体风格确定前不需要做其页面的视觉设计。 4.2.4 icon的设定 俗话说细节决定成败，icon在设计中就占有细节这个位置。 每一个icon的设计要跟整体页面的风格保持一致，这样才能保证所有页面设计完成以后风格是保持统一的。 4.3 视觉页面设计4.3.1 主要页面的评审 主要页面的评审对于设计开展后面的工作十分重要，设计师需要在评审的时候讲述自己的设计思路，包括颜色的设计理由，风格的设计理由等，讲述清楚，要让参与人员了解到你在做设计的时候思考的内容，而不单单是制作图。 4.3.2 整体页面的设计 具体要求如下： 在基于视觉风格已确定的情况下，按照交互原型图逐个页面进行设计。 在设计中对于细节的把握要准确。 在视觉设计中我们要考虑到不同平台的特性，根据不同平台进行设计，切勿混淆各平台的控件。 在某些需要适配的移动端上面，或是H5的设计中，要考虑到尺寸的问题。 在设计中一些容易忽视的页面也要做出来，比如：断网页面、连不上wifi页面、404页面、正在加载 等展示效果。 4.4 资源输出我们在设计评审通过后，接下来会进行一项比较重要环节，跟前端开发合作实现效果。 这个时候我们需要输出5个文件资源，具体资源包分别是： 视觉效果图的尺寸标注、所有尺寸的切图资源包、解释文案、效果图源文件、全部视觉效果图。 4.4.4 编写总结规范 在一款产品结束后，设计人员需要做一份设计总结，就是对现在这一版本进行视觉规范，这也是对设计师工作的一个总结。 在对下一版的开发也是很有帮助的，大大增加了开发者的效率。5优化体验点的编写 这个是在项目已经成功上线后，第二版还没开始前，我们要对现有的一个版本的体验点进行优化。 这部分内容，开发人员和用户研究人员一起参与。 具体内容有： 对现有产品的一些功能需要优化的点的记录，有哪些不足之处。 基于用户的反馈，哪些功能是可以省略的，哪些是要强调的。 有哪些更好的想法可以用在下一个版本中的。 敏捷点的流程图:]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[揭秘TensorFlow：Google开源到底开的是什么？]]></title>
      <url>%2F2017%2F03%2F23%2F%E6%8F%AD%E7%A7%98TensorFlow%EF%BC%9AGoogle%E5%BC%80%E6%BA%90%E5%88%B0%E5%BA%95%E5%BC%80%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[在一个完整的工业界语音识别系统里， 除了深度学习算法外，还有很多工作是专业领域相关的算法，以及海量数据收集和工程系统架构的搭建。 这两天发现朋友圈被Google开源深度学习系统TensorFlow的新闻刷屏了。这当然是一个很好的消息，尤其对我们这种用机器学习来解决实际问题的工程师来说更是如此。但同时很多人并不清楚听起来神乎其神的“TensorFlow”到底是什么，有什么意义。 我是人工智能科技公司“出门问问”的工程师，对人工智能“深度学习”理论有一定的了解，在这里就为大家“破雾”，聊一聊Google的开源系统TensorFlow。 什么是深度学习？ 在机器学习流行之前，都是基于规则的系统，因此做语音的需要了解语音学，做NLP的需要很多语言学知识，做深蓝需要很多国际象棋大师。 而到后来统计方法成为主流之后，领域知识就不再那么重要，但是我们还是需要一些领域知识或者经验来提取合适的feature(特征)，feature的好坏往往决定了机器学习算法的成败。对于NLP来说，feature还相对比较好提取，因为语言本身就是高度的抽象；而对于Speech或者Image来说，我们人类自己也很难描述我们是怎么提取feature的。比如我们识别一只猫，我们隐隐约约觉得猫有两个眼睛一个鼻子有个长尾巴，而且它们之间有一定的空间约束关系，比如两只眼睛到鼻子的距离可能差不多。但怎么用像素来定义”眼睛“呢？如果仔细想一下就会发现很难。当然我们有很多特征提取的方法，比如提取边缘轮廓等等。 但是人类学习似乎不需要这么复杂，我们只要给几张猫的照片给人看，他就能学习到什么是猫。人似乎能自动“学习”出feature来，你给他看了几张猫的照片，然后问猫有什么特征，他可能会隐隐预约地告诉你猫有什么特征，甚至是猫特有的特征，这些特征豹子或者老虎没有。 深度学习为什么最近这么火，其中一个重要的原因就是不需要(太多)提取feature。 从机器学习的使用者来说，我们以前做的大部分事情是feature engineering，然后调一些参数，一般是为了防止过拟合。而有了深度学习之后，如果我们不需要实现一个CNN或者LSTM，那么我们似乎什么也不用干。(机器让工人失业，机器学习让搞机器学习的人失业！人工智能最终的目的是让人类失业？) 但是深度学习也不是万能的，至少现在的一个问题是它需要更强的计算能力才能训练出一个比较好的模型。它还不能像人类那样通过很少的训练样本就能学习很好的效果。 其实神经网络提出好几十年了，为什么最近才火呢？其中一个原因就是之前它的效果并不比非深度学习算法好，比如SVM。 到了2006年之后，随着计算能力的增强(尤其是GPU的出现)，深度神经网络在很多传统的机器学习数据集上体现出优势来之后，后来用到Image和Speech，因为它自动学出的feature不需要人工提取feature，效果提升更加明显。这是否也说明，我们之前提取的图像feature都不够好，或者是根据人脑的经验提取的feature不适合机器的模型？ 很多人对深度学习颇有微词的一个理由就是它没有太多理论依据，更多的像蛮力的搜索——非常深的层数，几千万甚至上亿参数，然后调整参数拟合输入与输出。其实目前所有的机器学习都是这样，人类的大脑的学习有所不同吗，不是神经元连接的调整吗？ 但不管怎么说，从深度神经网络的使用者(我们这样的工程师)的角度来说，如果我们选定了一种网络结构，比如CNN，那么我们要做的就是根据经验，选择合适的层数，每层的神经元数量，激活函数，损失函数，正则化的参数，然后使用validation数据来判定这次训练的效果。从效果来说，一般层次越多效果越好(至少相对一两层的网络来说)，但是层次越多参数也越多，训练就越慢。单机训练一个网络花几天甚至几周的时间非常常见。因此用多个节点的计算机集群来训练就是深度学习的核心竞争力——尤其对于用户数据瞬息万变的互联网应用来说更是如此。 常见深度神经网络的训练和问题 对于机器学习来说，训练是最关键也最困难的部分，一般的机器学习模型都是参数化的模型，我们可以把它看成一个函数y=f(w;x)。 比如拿识别图像来说，输入x是这张图片的每个像素值，比如MNIST的数据是2828的图片，每个点是RGB的颜色值，那么x就是一个2828*3的向量。而一个模型有很多参数，用w表示。输出y是一个向量，比如MNIST的数据是0-9的10个数字，所以我们可以让y输出一个10维的向量，分别代表识别成0-9的置信度(概率)，选择最大的那个作为我们的识别结果(当然更常见的是最后一层是softmax而不是普通的激活函数，这样这个10维向量加起来等于1，可以认为是分类的概率)。 而训练就是给这个模型很多(x,y)，然后训练的过程就是不断的调整参数w，然后使得分类错误尽可能少(由于分类错误相对w不连续因而不可求导，所以一般使用一个连续的Loss Function)。 对于神经网络来说，标准的训练算法就是反向传播算法(BackPropagation)。从数学上来说就是使用(随机)梯度下降算法，求Loss Function对每个参数的梯度。另外我们也可以从另外一个角度来看反向传播算法，比如最后一层的神经网络参数，直接造成错误(Loss)；而倒数第二层的神经网络参数，通过这一次的激活函数影响最后一层，然后间接影响最终的输出。反向传播算法也可以看成错误不断往前传播的过程。 由于深度神经网络的参数非常多，比如GoogleNet， 2014年ILSVRC挑战赛冠军，将Top5 的错误率降低到6.67%，它是一个22层的CNN，有5百多万个参数。所以需要强大的计算资源来训练这么深的神经网络。 其中，CNN是Image领域常见的一种深度神经网络。由Yann LeCun提出，通过卷积来发现位置无关的feature，而且这些feature的参数是相同的，从而与全连接的神经网络相比大大减少了参数的数量。(cnn深度神经网络)(cnn深度神经网络) 最开始的改进是使用GPU来加速训练，GPU可以看成一种SIMT的架构，和SIMD有些类似，但是执行相同指令的warp里的32个core可以有不同的代码路径。对于反向传播算法来说，基本计算就是矩阵向量乘法，对一个向量应用激活函数这样的向量化指令，而不像在传统的代码里会有很多if-else这样的逻辑判断，所以使用GPU加速非常有用。 但即使这样，单机的计算能力还是相对有限的。 深度学习开源工具 从数学上来讲，深度神经网络其实不复杂，我们定义不同的网络结构，比如层次之间怎么连接，每层有多少神经元，每层的激活函数是什么。前向算法非常简单，根据网络的定义计算就好了。 而反向传播算法就比较复杂了，所以现在有很多深度学习的开源框架来帮助我们把深度学习用到实际的系统中。 我们可以从以下几个不同的角度来分类这些开源的深度学习框架。 通用vs专用 深度学习抽象到最后都是一个数学模型，相对于传统的机器学习方法来说少了很多特征抽取的工作，但是要把它用到实际的系统中还有很多事情要做。而且对于很多系统来说，深度学习只是其中的一个模块。 拿语音识别来说，语音识别包含很多模块，比如声学模型和语言模型，现在的声学模型可以用LSTMs(一种RNN，也是一种深度学习网络)来做，但是我们需要把它融入整个系统，这就有很多工作需要做。而且目前大部分的机器学习方法包括深度学习，都必须假设训练数据和测试数据是相同(或者类似)的分布的。所以在实际的应用中，我们需要做很多数据相关的预处理工作。 比如Kaldi，它是一个语音识别的工具，实现了语音识别的所有模块，也包括一些语音识别常用的深度神经网络模型，比如DNN和LSTM。 而Caffe更多的是用在图像识别，它实现了CNN，因为这个模型在图像识别上效果非常好。 框架vs库 大部分开源的深度学习工具把整个模型都封装好了，我们只需要指定一些参数就行了。比如我们使用Caffe的CNN。 但是还有一些工具只是提供一些基础库，比如Theano，它提供了自动求梯度的工具。 我们可以自己定义网络的结构，我们不需要自己求梯度。使用Theano的好处是如果我们“创造”一个新的网络结构或者是很新的深度神经网络，那么其它框架很可能还没有实现，所以Theano在学术界很流行。当然坏处就是因为它不可能针对特定的模型做优化，所以可能性能不如特定的实现那么好。 单机vs集群 目前大部分的开源工具都是单机版的，有些支持在一个节点的多个GPU训练，但是支持GPU cluster比较少，目前支持多机训练的有GraphLab和Deeplearning4j。 Tensor Flow到底是什么？ Tensor(张量)意味着N维数组，Flow(流)意味着基于数据流图的计算，TensorFlow即为张量从图的一端流动到另一端。 TensorFlow 表达了高层次的机器学习计算，大幅简化了第一代系统，并且具备更好的灵活性和可延展性。TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。 从目前的文档看，TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。 而且从Jeff Dean的论文来看，它肯定是支持集群上的训练的。 在论文里的例子来看，这个架构有点像Spark或者Dryad等图计算模型。就像写Map-reduce代码一样，我们从高层的角度来定义我们的业务逻辑，然后这个架构帮我们调度和分配计算资源(甚至容错，比如某个计算节点挂了或者太慢)。目前开源的实现分布式Deep learning的GraphLab就是GAS的架构，我们必须按照它的抽象来编写Deep Learing代码(或者其它分布式代码，如果PageRank)，而Deeplearning4j直接使用了Spark。 Map-Reduce的思想非常简单，但是要写出一个稳定可用的工业级产品来就不容易了。而支持分布式机器学习尤其是深度学习的产品就更难了，Google的TensorFlow应该是一种抽象方式，可惜现在开源的部分并没有这些内容。有点像Google开源了一个单机版的Hadoop，可以用这种抽象(Map-reduce)来简化大数据编程，但是实际应用肯定就大大受限制了。 深度学习能解决所有问题吗？ 至少目前来看，深度学习只是在Speech和Image这种比较“浅层”的智能问题上效果是比较明显的，而对于语言理解和推理这些问题效果就不那么好了，也许未来的深度神经网络能解决更“智能”的问题，但只是目前还不行。 Google开源TensorFlow的意义 这一次的Google开源深度学习系统TensorFlow在很多地方可以应用，如语音识别，自然语言理解，计算机视觉，广告等等。但是，基于以上论点，我们也不能过分夸大TensorFlow这种通用深度学习框架在一个工业界机器学习系统里的作用。在一个完整的工业界语音识别系统里， 除了深度学习算法外，还有很多工作是专业领域相关的算法，以及海量数据收集和工程系统架构的搭建。 不过总的来说，这次谷歌的开源很有意义，尤其是对于中国的很多创业公司来说，他们大都没有能力理解并开发一个与国际同步的深度学习系统，所以TensorFlow会大大降低深度学习在各个行业中的应用难度。 链接: Tensorflow 官方版教程中文版 真正从零开始，TensorFlow详细安装入门图文教程！ 从原理到代码：大牛教你如何用 TensorFlow 亲手搭建一套图像识别模块 | AI 研习社 TensorFlow架构与设计：会话生命周期]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Elon Musk的第一性原理思考方式]]></title>
      <url>%2F2017%2F03%2F21%2FElon-Musk%E7%9A%84%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[这里有必要先介绍ElonMusk:Elon Musk出生于南非，18岁时移民美国，天才生意人，做过Paypal，环保跑车公司Tesla，空间探索技术公司的首席执行官兼首席技术官，特斯拉汽车的产品设计师。新公司是SpaceX，是一家私人火箭公司，正在用无可匹敌的低廉价格发射太空飞船。他的人生目标是将人类送达火星，并在火星上创办企业。 就是这样一位天才生意人提出了他在产品设计的一种思维方式，叫“第一性原理”：打破一切知识的藩篱，回归到事物本源去思考基础性的问题，在不参照经验或其它的情况下，从物质/世界的最本源出发思考事物/系统。这与他的物理学出身和工程师思维密不可分。 “我相信有一种很好的思考架构，就是第一性原理，我们能够真正地去思考一些基础的真理，并且从中去论证，而不是类推。我们绝大多数时候都是类推地思考问题，也就是模仿别人做的事情并加以微幅更改。但当你想要做一些新的东西时，必须要运用第一性原理来思考。”Elon Musk（以下用马斯克代替）解释说。 第一性原理是一个计算物理专业名词，广义的第一性原理计算指的是一切基于量子力学原理的计算。第一性原理就是从头计算，不需要任何参数，只需要一些基本的物理常量，就可以得到体系基态的基本性质的原理。 马斯克幼年时代的偶像几乎都是伟大的科学家和工程师，比如尼古拉·特斯拉、爱迪生、爱因斯坦、牛顿、莎士比亚。特斯拉汽车就是为了向尼古拉·特斯拉致敬。 当有媒体记者问他“觉得自己是工程师还是商人”时，他脱口而出：“我是一名工程师，我把大部分时间都花在制造和设计上。”是的，和大多数创业者不同，马斯克似乎一直在追求技术上的成就和突破，他有很大部分的成就感来自于技术问题的解决，而不完全是挣了多少钱。 当马斯克坐拥大笔资金，决定进军太空时，他的工程师精神开始得到淋漓尽致的发挥。尽管进军太空的念头起源有些偶然，一开始看上去只是硅谷新贵们“烧钱”的游戏，但马斯克却非常当真。为了造火箭，马斯克研读了名为《火箭推进基本原理》的书。他虽然学的是物理，但并不是火箭专家。为了造火箭，他读遍了相关的大学教材。 事实上，正是第一性原则的思维方式帮助马斯克解决了很多技术上的难题。电池是电动车最关键的部分，也是一直阻碍电动车产业化的关键技术。马斯克在思考电池问题时，将电池组分解成最基础的材料组成部分：碳、镍、铝、其他用于分离的聚合物还有一个盒子，这些都是电池组重要的组成元素，这是形成一块电池的最基本的事实。从那里，每个部分都可以优化、改进。这样，他造出了每千瓦小时80美元的廉价电池。 SpaceX也一样。SpaceX发射火箭采用的实际上是成熟的技术和设备，创新之处在于生产流程成本最小化的改进。马斯克希望把商业发射市场的火箭发射费降低九成，而成本是核心的核心。美国航空航天专家霍华德表示：“马斯克的秘密不在技术，而在预算控制。” “第一性原理”的思维方式贯穿于马斯克的整个经营思路，“直销”也是其中的一个体现。如何让用户获得更实惠的价格和更好的用车体验？传统的方式是选择更好的经销商合作，而特斯拉选择让用户直接从制造商手中买车，减少中间代理环节，亲自掌控销售渠道，把价格压到最低。 当然，“第一性原理”思维并非马斯克独有，能够走在科技最前沿，进行颠覆性创新的企业家，多少都具备这样的思维模式，例如苹果原CEO乔布斯。还记得苹果公司说要做手机的时候，那个时候手机市场已经很成熟了，诺基亚也是那时候的一代霸主，但乔布斯看准了未来的趋势：按键太占空间，将被多触点控屏代替即触摸屏，键盘都可以软件代替。那个时候黑莓手机很流行，几位团队成员主张配备键盘，但乔布斯否决了这种想法。物理键盘会占用屏幕空间，而且不如触摸屏键盘灵活、适应性强。“如果我们能用软件把键盘功能实现在屏幕上，那你想想，我们能在这个基础上作多少创新，这是一场革命。”乔布斯说。最后，产品出来，如果你想拨号，屏幕会显示数字键盘：想写东西，调出打字键盘。每种特定的活动都对应的按钮可以满足需求，但当用户观赏视频时，这些键盘都会消失，软件取代硬件，使得界面流畅灵活。Iphone的诞生，改变了手机世界的格局，更重要的是改变了人类世界的生活方式。 在移动互联网大浪潮的今天，每个企业都活的很小心，因为一不小心，你的东西也许就被人颠覆了，又或许你创作出的产品对整个行业进行了颠覆，这个时代变化之快，令我们叹为观止。这是一个充满奇迹的时代。 当下的中国，太多的创业者在用类似的方法做同样的产品，如果其中有人能够跳出既有模式的思维模式，用“第一性原理”来思考行业和产品，或许有无限的未来。 以下是ElonMusk在接受采访是的原话：“Well, I do think there’s a good framework forthinking. It‘s physics. You know, the sort of first principlesreasoning.Generally I think there are – what I mean by that is, boil thingsdown to their fundamental truths and reason up from there, as opposed to reasoning by analogy. Physics is really figuring out how todiscover new things that are counterintuitive, like quantum mechanics.” 第一性原理强调用少量的基本数据进行分析，简化。强调事实和少量假设，从问题的最本质出发，进行推理思考，而不是类比思考。不被过去的经验知识所干扰。 关闭大脑，用直觉去感受，抓住事物的本质。 第一性原理的思维方式强调独立思考，而不是人云亦云。强调质疑，不轻易接受否定的答案。 “第一原理”由 2300 年前古希腊哲学家亚里士多德提出。他认为，在每一系统的探索中，存在第一原理，是一个最基本的命题或假设，不能被省略或删除，也不能被违反。亚里斯多德认为，第一原理有着至高无上的地位。他甚至表示“第一原理”充满“神性”。此处“神”已非一个特殊的族类，而是渗透于万物自然之中的一种“性质”—亚里士多德将此种性质看作是最高贵的。 第一性原理还是一个量子力学的术语，意思是从头算起，无需任何经验参数，只用少量基本数据，做量子计算，得出分子机构和物理的性质。这与我们日常生活中惯用的类比推理方式迥异。类比也是一种重要的逻辑思维和推理法，指运用已经有的知识和经验将陌生的，不熟悉的的问题与平时熟悉的问题进行类比，尝试找到解决的方法。 在创业之前，马斯克曾申请了斯坦福大学的应用物理学博士学位，有望成为一名物理学家。但没过几天他就放弃了。然而，物理学给他最大的影响则是“第一性原理思考模式”：一种不断追问事情本质思考模式。正如他说：“我觉得问题关键在于第一性原理而不是类比；生活中，我们推理的一般方法是类比；应用类比的方法，人们之所以做某些事情，是因为，人们曾经做过这些事情，或者其他人做过；但第一性原理思维下，人们会首先刨根问底最基础的事实真相，然后基于这些事实在进行推理论证。” &apos;The normal way we conduct our lives is we reason by analogy,&apos; Elon Musk said. &apos;[With analogy] we are doing this because it&apos;s like something else thatwas done, or it is like what other people are doing. [With first principles]you boil things down to the most fundamental truths … and then reason up fromthere.&apos; (Musk) “第一性原理”: 思维是一个典型的物理思维，一切是基于事实的、本源的，而非由于演化或竞争产生的市场的、现时的。这对于创新至关重要。在开发火箭项目SpaceX之初，马斯克团队碰到的最大问题就是如何降低火箭的成本。他们并没有仿照市场上常规的成本结构，而是对火箭从根源上进行了重新分析，哪些部件是火箭所必须的，这些部件重新整合后降到了市场价格的2%。惊人乎？ 同样的事情还发生在此后的特斯拉汽车。大家都知道，电池是新能源汽车的最主要部件之间，它的成本也是整个汽车最大的成本部分。当时，电池的成本大概是 600 美元／千瓦时。既然这么贵，很多企业在创新时，一般会把这当成一个既定要素，而往往不会去改变它。但按照马斯克的第一原理思维，他们会问：电池组到底是由什么材料组成的？这些电池原料的市场价格是多少？电池的组成包括碳、镍、铝和一些聚合物。如果我们从伦敦金属交易所购买这些原材料然后组合成电视，需要多少钱？他们做到了，将电池的成本降到了只要 80 美元／千瓦时。 竞争容易使人迷失方向，而错失发现事物本质的机会。学习、工作也是一样，急迫、功利将只能获得皮毛。祝贺今年成功的高考学生，因为他们的深入学习过程，才刚刚开始。那些误入歧途的、已步入社会太久的我们，无论从事什么行业，干什么事情，多思考一些本源或本质的东西还是很有必要的。 知乎:特斯拉创始人伊隆·马斯克的思维方式：第一性原理]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一些镜像]]></title>
      <url>%2F2017%2F03%2F14%2F%E4%B8%80%E4%BA%9B%E9%95%9C%E5%83%8F%2F</url>
      <content type="text"><![CDATA[一些镜像 密码：Github Google网页搜索 https://g.zmirrordemo.comScholar https://g.zmirrordemo.com/scholarImage https://g.zmirrordemo.com/imghpGmail https://g.zmirrordemo.com/gmail (基本HTML) 中文维基https://g.zmirrordemo.com/wiki TwitterPC https://t-pc.zmirrordemo.comMobile https://t-mobile.zmirrordemo.com InstagramPC &amp; Mobile https://in.zmirrordemo.com FacebookPC https://fb.zmirrordemo.com绝大部分功能可用, 但是不完整]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Gitlab的使用]]></title>
      <url>%2F2017%2F03%2F14%2FGitlab%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[最近成功的在公司部署了gitlab，鉴于同学们还不会使用，这里写篇博客说明下。如果想安装gitlab的话，需要一些linux的基础知识 1.什么是Git鉴于有同学还没用过git，就先介绍一下git吧。git就是一种版本控制工具。说到版本控制，大家可能就想到了svn。但是两者有着本质的区别。 svn是集中化的版本控制系统, 只有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 git是分布式的版本控制系统, 每一个终端都是一个仓库，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。每一次的提取操作，实际上都是一次对代码仓库的完整备份。 集中式版本控制： 分布式版本控制： 2.GitLab创建工程点击导航条上的 “+” 就可以进入创建工程页面这里面很简单,主要讲两个地方： 2.1 namespace这个选择是用来决定这个工程所属的，可以选User为你自己。或者选择组，这个会影响到后面工程的url。例如我选择了组suning创建工程SuningTest、那么这个工程就会在这个组内可见，那么访问路径就是link 2.2 Visibility Level权限等级分三种： Private 私有的，只有你自己或者组内的成员能访问 Internal 所有登录的用户 Public 公开的，所有人都可以访问 3.Git的使用3.1 添加sshkeygit仓库之间的代码传输协议主要使用ssh协议。而一般搭建gitlab的时候使用的git用户是没有密码的，因此直接ssh是不能登录的，就需要使用ssh-keygen上传公钥，使用非对称加密传输。下面讲述如何上传你的ssh公钥： 3.1.1生成sshkey在终端中敲下面的命令，第一步会生成一对私钥和公钥，分别存在 ~/.ssh/id_rsa和~/.ssh/id_rsa.pub中。第二步查看公钥字符串。 12ssh-keygen -t rsa -C &quot;$your_email&quot;cat ~/.ssh/id_rsa.pub 3.1.2保存sshkey到gitlab在面板上依次点击Profile Settings –&gt; SSH Keys –&gt; Add SSH Keys。然后把上一步中的id_rsa.pub中的内容拷贝出来粘贴到输入框中，保存。完成上面两步之后就成功的添加了sshkey了，然后就可以上传代码了。 3.2 初始上传代码如果你已经使用过git了，那么这一步对你来说可以跳过了。整体来说比较简单的。下面的$project_root代表工程根目录 进入工程目录 cd $project_root` 初始化git仓库 git init 添加文件到仓库 git add . 提交代码到仓库 git commit -m &apos;init commit&apos; 链接到git server git remote add origin git@example.com:namespace/projectname.git push代码到服务器 git push origin master 3.3 克隆代码到本地在svn中，我们都叫checkout. 把代码checkout到本地。而git中我们叫克隆，克隆会把整个仓库都拉到本地。如，我要把刚才的工程再clone到本地。git clone git@example.com:namespace/projectname.git 3.4 设置gitignore有一些文件或文件夹是我们不想要被版本控制的，比如.DS_Store build\ xcuserdata thumbs.db，git提供了一种忽略的方案。 在项目根目录下创建.gitignore文件，然后把需要忽略的文件或文件夹名写进去。这样就可以忽略这些文件受版本控制啦。 svn也提供了这样忽略的方案，svn也可以设置全局忽略。svn的此配置放在~/.subversion/config中global-ignores的值。 通过设置ignore，我们可以实现git和svn双管理哦，就是在svn忽略.git文件夹，在gitignore中忽略.svn文件夹，有兴趣的同学可以试试 3.5 Git文件的状态Git管理下的文件有3种状态，如下图： 3.6 Git基础Git博大精深，个人感觉，不管是从其强大的功能上，还是从其实现方案上来讲比svn强大很多。这里贴个学习链接吧，这一系列讲的非常全面非常详细：Git基础 3.7 图形化Git管理工具如果说你不喜欢命令行的使用方式，你也可以使用图形界面工具SoureTree: http://www.sourcetreeapp.com/ 界面简洁，使用方便,功能强大。 贴个预览：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo-admin安装以及问题解决]]></title>
      <url>%2F2017%2F03%2F13%2Fhexo-admin%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
      <content type="text"><![CDATA[1.安装hexo和创建一个博客12345npm install -g hexocd ~/hexo init my-blogcd my-blognpm install 2.安装hexo-admin和本地运行123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/ (hexo-admin管理只能在本地用,github上面只有静态页面不能进行管理,切记!!!) 3.密码保护如果你的hexo-admin需要一些保护密码，你只需要添加一些你的hexo配置变量到配置文件_config.yml：1234admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something 4.安装问题处理123456$ npm install --save hexo-adminnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issuehexo-site@0.0.0 E:\git\linjin101.github.ionpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;) 5.解决12npm install minimatch@&quot;3.0.2&quot; npm update -d 如果还有问题:升级后依旧报错,只好重装: 123npm update minimatchnpm -v minimatchnpm install -g npm@3 清理,生成,本地启动 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 浏览器打开http://localhost:4000/admin/ 6.NPM介绍:是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：允许用户从NPM服务器下载别人编写的第三方包到本地使用。允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github下载问题处理]]></title>
      <url>%2F2017%2F03%2F08%2Fgithub%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%2F</url>
      <content type="text"><![CDATA[http://jingyan.baidu.com/article/f79b7cb367e72e9145023e40.html?st=2&amp;os=0&amp;bd_page_type=1&amp;net_type=1 国内同步github库,通过国内库拉取文件超快 https://coding.net/u/linjin101/p/hexo-theme-yelee/git]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[产品设计体会功能列表：Feature List]]></title>
      <url>%2F2017%2F03%2F08%2F%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E4%BD%93%E4%BC%9A%EF%BC%881009%EF%BC%89%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8%EF%BC%9AFeature-List%2F</url>
      <content type="text"><![CDATA[只要需求采集的功夫做足了，你就会发现需求超多，必须每隔一段时间整理一次，通常我们叫它功能列表：Feature List,说一下自己感觉这个玩意应该怎么做，其中吸取了叶老大原来的表格还有网上一些相关文章的内容。这个表是用Excel做的，一些简单的技巧，比如条件格式、筛选、单元格有效性、单元格锁定、隐藏是必须的基本功，另外我比较喜欢把表格弄好看点，这样整天对着就不会闷死嘞，如图。 看不清吧？那就对了，不好意思有些信息不能公开。表格中每一行是一个功能，而每列都是这个功能的某个属性： 12345graph LR模块--&gt;功能功能--&gt;商业价值商业价值--&gt;开发量开发量--&gt;性价比 模块 子模块 功能 功能描述 商业价值描述 商业属性 商业优先级 开发量 性价比 备注 XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX 模块：一般来说，每个模块下分3~10个子模块是合理的，否则要考虑重新划分（由于这个癖好，自己电脑里的文件目录结构也是遵循这个原则的）。 子模块：稍大一点的产品至少要给功能模块做二级分类了（更大的产品视需要可能有更多级的模块分类），这部分其实又涉及另外一个很大的领域IA（信息构架，会影响将来产品的站点树形结构，页面组织，菜单层级等），后面也会整理一些相关内容。 功能：具体的说一点，要给用户提供什么功能，给这个功能起个名字。 功能描描述述：这里可以说具体一点。 商业价值描述：通俗点，卖点是什么，可以给用户提供什么价值。 商业属性：简单分为基本，扩展，增值。举个手机的例子，打电话短信是基本功能，给电话录音是扩展功能（和基本功能相关），而如果这个电话特别结实，可以当锤子钉钉子，那就是增值功能了。这里的区分其实没那么绝对，取决于很多因素，比如商业目的。 商业优先级：这块是整个Feature List工作中核心的部分，判断的准确直接影响着将来产品的方向，我们的做法是先基于自己对商业目标的理解，主观定一个级别，所以之前的功课很重要，然后再PD团队pk，如有必要，再去客户处确认。 （iamsujie补：有时候细分为功能的紧急程度、重要程度、生命周期等细分因素。） 开发量：一般由技术部门的项目经理或者系统分析师/架构师来确定。 性价比：简单一点就是综合商业属性、优先级与开发量来确定，可以找出一个合适自己产品的计算方法。 备注：这个不说了吧。 最后，对于这个表格，依照产品的大小、资源多少，可以灵活变通。 引用:http://iamsujie.com/1000/1009/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github怎么绑定自己的域名]]></title>
      <url>%2F2017%2F03%2F07%2Fgithub%E6%80%8E%E4%B9%88%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[github怎么绑定自己的域名？1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如http://xxxx.com，注意前面没有http://，也没有www，然后使用hexo g &amp;&amp; hexo d上传部署。例如 CNAME:xxx.com 2、在域名解析提供商，下面以dnspod为例。（1）先添加一个CNAME，主机记录写@，后面记录值写上你的http://xxxx.github.io（2）再添加一个CNAME，主机记录写www，后面记录值也是http://xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。 上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。 3、等十分钟左右，刷新浏览器，用你自己域名访问下试试 123http://www.jianshu.com/p/a39573555039http://www.jianshu.com/p/834d7cc0668d https://segmentfault.com/q/1010000004557073/a-1020000004561322]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo本地测试运行重启后页面空白,提示 : WARN No layout: index.html]]></title>
      <url>%2F2017%2F03%2F07%2Fhexo%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD-%E6%8F%90%E7%A4%BA-WARN-No-layout-index-html%2F</url>
      <content type="text"><![CDATA[运行git clone 指令获得主题后（假设是NEXT主题），在theme主题下保存文件夹的名称为：hexo-theme-next-0.4.0那么如果在config里设置的是next，就会出现这样的WARN，http://localhost:4000/显示的是空白。只要把theme下的文件夹名称改为next就显示正常了.要么就是获取的样式文件夹是空的,需要重新下载.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo部署后，CNAME会被自动删除，怎么办？]]></title>
      <url>%2F2017%2F03%2F07%2Fhexo%E9%83%A8%E7%BD%B2%E5%90%8E%EF%BC%8CCNAME%E4%BC%9A%E8%A2%AB%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。 如图：CNAME README都可以放在Source文件夹下，每次上传就不会消失了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[在github上创建新分支]]></title>
      <url>%2F2017%2F03%2F07%2F%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF%2F</url>
      <content type="text"><![CDATA[http://blog.csdn.net/guang11cheng/article/details/37757201http://blog.csdn.net/top_code/article/details/51931916http://www.cnblogs.com/horanly/p/6265182.html 在github上创建仓库：Create a new repository on the command line 123456touch README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/BrentHuang/MyRepo.gitgit push -u origin master 在本地新建一个分支： git branch Branch1切换到你的新分支: git checkout Branch1将新分支发布在github上： git push origin Branch1在本地删除一个分支： git branch -d Branch1在github远程端删除一个分支： git push origin :Branch1(分支名前的冒号代表删除) 直接使用git pull和git push的设置123Git branch --set-upstream-to=origin/master master git branch --set-upstream-to=origin/ThirdParty ThirdPartygit config --global push.default matching]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[blog-frist hexo配置问题]]></title>
      <url>%2F2017%2F03%2F07%2Fblog-frist%20hexo%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[https://www.zhihu.com/question/38219432 贴上一篇我之前搭建博客时，参考的教程 引用自：Xuanwo’s Blog// 史上最详细的Hexo博客搭建图文教程 配置Deployment首先，你需要为自己配置身份信息，打开命令行，然后输入：git config –global user.name “yourname”git config –global user.email “youremail”同样在_config.yml文件中，找到Deployment，然后按照如下修改：deploy:type: gitrepo: git@github.com:yourname/yourname.github.io.gitbranch: master如果使用git方式进行部署，执行npm install hexo-deployer-git –save来安装所需的插件然后在当前目录打开命令行，输入：hexo d 随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。你看看会不会是这边的配置出现了问题。 作者：孙武军链接：https://www.zhihu.com/question/38219432/answer/75389052来源：知乎著作权归作者所有，转载请联系作者获得授权。 ======================================================= 提交项目，部署 继续在本目录命令行安装部署工具（方便以后更新）npm install hexo-deployer-git -save1、初始化本地仓库：git init2、连接远程仓库：如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。git remote add origin https://github.com/wapchief/wapchief.github.io.git3、发布hexo到github pagehexo clean &amp;&amp; hexo g &amp;&amp; hexo d4、添加文件到本地仓库git add5、提交声明git commit -m &#39;内容&#39;6、推送到远程仓库（github）git push origin这里建议创建一个新的分支hexo，用于管理hexo文件。 提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况https://github.com/wapchief/wapchief.github.io创建并切换到新建分支：git checkout -b hexo将分支推送到远程仓库：git push origin hexo这时打开网站就能看到效果了。记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。文章在hexo目录下的\source_posts文件夹中，是md格式，也就是Markdown格式。以后可以用以下命令部署。也就是第三步 //等于一次性执行了，清空、刷新、部署三个命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML4和HTML5的10个关键区别]]></title>
      <url>%2F2017%2F03%2F07%2FHTML4%20%E5%92%8C%20HTML5%20%E7%9A%8410%E4%B8%AA%E5%85%B3%E9%94%AE%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[HTML5是HTML标准的下一个版本。越来越多的程序员开始HTML5来构建网站。 如果你同时使用HTML4和HTML5的话，你会发现用HTML5从头构建，比从HTML4迁移到HTML5要方便很多。 虽然HTML5没有完全颠覆HTML4，它们还是有很多相似之处，但是它们 也有一些关键的不同。本文就列出了它们之间10个关键的不同之处。1. HTML5 标准还在制定中首先要注意的是，HTML5虽然现在很火，但是HTML5标准还在制定中，标准仍在改变。HTML4已经10多年了，不会有任何改变了。 2. 简化的语法HTML5简化了很多细微的语法，例如doctype的声明，你只需要写!doctype html就行了。HTML5与HTML5，XHTML1兼容，但是与SGML不兼容。 3. canvas 标签替代FlashFlash给很多Web开发者带来了麻烦，要在网页上播放Flash需要一堆代码和插件。canvas标签使得开发者只要使用一个标签就 能和用户产生UI交互。虽然目前canvas标签还不能实现Flash的所有功能，但是很快canvas就会让 Flash看起来老土，哈哈！ 4. 新增 heade 和 footer 标签HTML5设计的一个原则是更好的体现网站的语义性，所以增加了header和footer这样的标签，用来明确表示网页的结构。 5. 新增 section 和 article 标签与 header , footer类似，section和article也有利于清晰化网页的结构，更有利于SEO。 6. 新增 menu 和 figure 标签menu可以被用于创建传统的菜单，也可以用于工具栏和上下文菜单。figure标签使得网页文字和图片的排版更专业。 7. 新增 audio 和 video 标签这两个标签可能是HTML5里面最有用的两个标签了。顾名思义，这两个标签是用来播放音频和视频的。 8. 全新的表单HTML5对 form 和 forminput 标签进行了大量修改，添加了很多新的属性，也修改了很多属性。 9. 删除 b 和 font 标签这个改进我还无法理解。我不认为删除这两个标签对代码的改进有很大的帮助。官方的解释是应该用CSS来替代这两个标签。但我还是觉得对于简单的文本，这两个标签还是很方便的。 10. 删除 frame , center , big 标签我已经记不得上次是什么时候使用这些标签了。 以上十点只是HTML5和HTML4差别的很小一部分，最新最全的HTML5-HTML4对比信息请看 http://dev.w3.org/html5/html4-differences/ 文章转载自 开源中国社区 [http://www.oschina.net]本文标题：HTML4 和 HTML5 的10个关键区别本文地址：https://www.oschina.net/news/22219/html4-html5-differences]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo安装配置]]></title>
      <url>%2F2017%2F03%2F06%2Fhexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[win10安装报错,提示需要管理员账户.后来修改权限半天,而且也切换管理员账户还是出错.误解搜索错误解决办法,最后替换淘宝的源解决问题.报错: $ npm install hexo-cli -g npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\hexo-cli\node_modules\chokidar\node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) npm ERR! Windows_NT 10.0.14393 npm ERR! argv &quot;D:\\nodejs\\node.exe&quot; &quot;D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;hexo-cli&quot; &quot;-g&quot; npm ERR! node v6.10.0 npm ERR! npm v3.10.10 npm ERR! path C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall rename npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at moveAway (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:38:5) npm ERR! at destStatted (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:27:7) npm ERR! at D:\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:267:18 npm ERR! at FSReqWrap.oncomplete (fs.js:123:15) npm ERR! npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at Error (native) npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at moveAway (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:38:5) npm ERR! at destStatted (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:27:7) npm ERR! at D:\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:267:18 npm ERR! at FSReqWrap.oncomplete (fs.js:123:15) npm ERR! npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at Error (native) npm ERR! npm ERR! Please try running this command again as root/Administrator. npm ERR! Please include the following file with any support request: npm ERR! E:\git\hexo\npm-debug.log 后来执行下面语句安装成功hexonpm install -g hexo --registry=https://registry.npm.taobao.org 淘宝 NPM 镜像http://npm.taobao.org/镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）: 1.通过config命令npm config set registry https://registry.npm.taobao.orgnpm info underscore（如果上面配置正确这个命令会有字符串response） 2.命令行指定npm –registry https://registry.npm.taobao.org info underscore 3.编辑 ~/.npmrc 加入下面内容registry = https://registry.npm.taobao.org]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github配置]]></title>
      <url>%2F2017%2F03%2F06%2Fgit%E6%97%A0%E6%B3%95pull%E4%BB%93%E5%BA%93%2F</url>
      <content type="text"><![CDATA[git无法pull仓库refusing to merge unrelated histories http://blog.csdn.net/lindexi_gd/article/details/52554159 本文讲的是把Git在最新2.9.2，合并pull两个不同的项目，出现的问题如何去解决fatal: refusing to merge unrelated histories 我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。 先pull，因为两个仓库不同，发现refusing to merge unrelated histories，无法pull 因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在git pull，这句代码是在git 2.9.2版本发生的，最新的版本需要添加–allow-unrelated-histories 假如我们的源是origin，分支是master，那么我们 需要这样写git pull origin master --allow-unrelated-histories需要知道，我们的源可以是本地的路径]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git无法pull仓库]]></title>
      <url>%2F2017%2F03%2F06%2Fgit%E6%97%A0%E6%B3%95pull%E4%BB%93%E5%BA%93refusing%20to%20merge%20unrelated%20histories%2F</url>
      <content type="text"><![CDATA[git无法pull仓库refusing to merge unrelated histories http://blog.csdn.net/lindexi_gd/article/details/52554159 本文讲的是把Git在最新2.9.2，合并pull两个不同的项目，出现的问题如何去解决fatal: refusing to merge unrelated histories 我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。 先pull，因为两个仓库不同，发现refusing to merge unrelated histories，无法pull 因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在git pull，这句代码是在git 2.9.2版本发生的，最新的版本需要添加–allow-unrelated-histories 假如我们的源是origin，分支是master，那么我们 需要这样写git pull origin master --allow-unrelated-histories需要知道，我们的源可以是本地的路径]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github配置折腾步骤]]></title>
      <url>%2F2017%2F03%2F06%2Fgithub%E9%85%8D%E7%BD%AE%E6%8A%98%E8%85%BE%E6%AD%A5%E9%AA%A4%2F</url>
      <content type="text"><![CDATA[win10安装报错,提示需要管理员账户.后来修改权限半天,而且也切换管理员账户还是出错.误解搜索错误解决办法,最后替换淘宝的源解决问题.报错: $ npm install hexo-cli -g npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\hexo-cli\node_modules\chokidar\node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) npm ERR! Windows_NT 10.0.14393 npm ERR! argv &quot;D:\\nodejs\\node.exe&quot; &quot;D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;hexo-cli&quot; &quot;-g&quot; npm ERR! node v6.10.0 npm ERR! npm v3.10.10 npm ERR! path C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli npm ERR! code EPERM npm ERR! errno -4048 npm ERR! syscall rename npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at moveAway (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:38:5) npm ERR! at destStatted (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:27:7) npm ERR! at D:\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:267:18 npm ERR! at FSReqWrap.oncomplete (fs.js:123:15) npm ERR! npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at Error (native) npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at moveAway (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:38:5) npm ERR! at destStatted (D:\nodejs\node_modules\npm\lib\install\action\finalize.js:27:7) npm ERR! at D:\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:267:18 npm ERR! at FSReqWrap.oncomplete (fs.js:123:15) npm ERR! npm ERR! Error: EPERM: operation not permitted, rename &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\hexo-cli&apos; -&gt; &apos;C:\Users\linjin101\AppData\Roaming\npm\node_modules\.hexo-cli.DELETE&apos; npm ERR! at Error (native) npm ERR! npm ERR! Please try running this command again as root/Administrator. npm ERR! Please include the following file with any support request: npm ERR! E:\git\hexo\npm-debug.log 后来执行下面语句安装成功hexonpm install -g hexo --registry=https://registry.npm.taobao.org 淘宝 NPM 镜像http://npm.taobao.org/镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）: 1.通过config命令npm config set registry https://registry.npm.taobao.orgnpm info underscore（如果上面配置正确这个命令会有字符串response） 2.命令行指定npm –registry https://registry.npm.taobao.org info underscore 3.编辑 ~/.npmrc 加入下面内容registry = https://registry.npm.taobao.org]]></content>
    </entry>

    
  
  
</search>
